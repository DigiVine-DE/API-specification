get:
  summary: Returns a specific stored Quality Measurement from the collection
  description: >
    Returns a specific stored Quality Measurement from the collection.
    The parameters `FieldId`, `PlanterRunId`, `PlantId` and `QualityMeasurementId` are required, to get the specific stored Quality Measurement.
    If the operation was successful (status code `200`), the specific Quality Measurement will be returned.
  operationId: getOneQualityMeasurement
  tags:
    - QualityMeasurement
    - Get
    - GetOne
  parameters:
    - $ref: "../openapi.yaml#/components/parameters/FieldId"
    - $ref: "../openapi.yaml#/components/parameters/PlanterRunId"
    - $ref: "../openapi.yaml#/components/parameters/PlantId"
    - $ref: "../openapi.yaml#/components/parameters/QualityMeasurementId"
  responses:
    "200":
      description: Successful operation
      content:
        application/json:
          schema:
            $ref: "../openapi.yaml#/components/schemas/QualityMeasurement"
      links:
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement
        GetAllQualityMeasurementsById:
          $ref: "../openapi.yaml#/components/links/GetAllQualityMeasurementsById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}
        DeleteOneQualityMeasurementById:
          $ref: "../openapi.yaml#/components/links/DeleteOneQualityMeasurementById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant
        GetAllPlantsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlantsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        GetOnePlantById:
          $ref: "../openapi.yaml#/components/links/GetOnePlantById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        DeleteOnePlantById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlantById"
        # GET /field/{FieldId}/planter
        GetAllPlanterRunsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlanterRunsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}
        GetOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/GetOnePlanterRunById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}
        DeleteOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlanterRunById"
        # GET /field
        GetAllFieldsRedirected:
          $ref: "../openapi.yaml#/components/links/GetAllFieldsRedirected"
        # GET /field/{FieldId}
        GetOneFieldById:
          $ref: "../openapi.yaml#/components/links/GetOneFieldById"
        # DELETE /field/{FieldId}
        DeleteOneFieldById:
          $ref: "../openapi.yaml#/components/links/DeleteOneFieldById"
    "400":
      $ref: "../openapi.yaml#/components/responses/BadRequest"
    "401":
      $ref: "../openapi.yaml#/components/responses/Unauthorized"
    "403":
      $ref: "../openapi.yaml#/components/responses/Forbidden"
    "404":
      description: The specified resource was not found
      links:
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement
        GetAllQualityMeasurementsById:
          $ref: "../openapi.yaml#/components/links/GetAllQualityMeasurementsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant
        GetAllPlantsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlantsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        GetOnePlantById:
          $ref: "../openapi.yaml#/components/links/GetOnePlantById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        DeleteOnePlantById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlantById"
        # GET /field/{FieldId}/planter
        GetAllPlanterRunsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlanterRunsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}
        GetOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/GetOnePlanterRunById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}
        DeleteOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlanterRunById"
        # GET /field
        GetAllFieldsRedirected:
          $ref: "../openapi.yaml#/components/links/GetAllFieldsRedirected"
        # GET /field/{FieldId}
        GetOneFieldById:
          $ref: "../openapi.yaml#/components/links/GetOneFieldById"
        # DELETE /field/{FieldId}
        DeleteOneFieldById:
          $ref: "../openapi.yaml#/components/links/DeleteOneFieldById"
    "500":
      $ref: "../openapi.yaml#/components/responses/BackendError"
delete:
  summary: Removes a specific stored Quality Measurement from the collection
  description: >
    Removes a specific stored Quality Measurement from the collection.
    The parameters `FieldId`, `PlanterRunId`, `PlantId` and `QualityMeasurementId` are required, to delete the specific stored Quality Measurement.
  operationId: deleteOneQualityMeasurement
  tags:
    - QualityMeasurement
    - Delete
    - DeleteOne
    - Modify
  parameters:
    - $ref: "../openapi.yaml#/components/parameters/FieldId"
    - $ref: "../openapi.yaml#/components/parameters/PlanterRunId"
    - $ref: "../openapi.yaml#/components/parameters/PlantId"
    - $ref: "../openapi.yaml#/components/parameters/QualityMeasurementId"
  responses:
    "200":
      description: Successfully deleted Quality Measurement
      links:
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement
        GetAllQualityMeasurementsById:
          $ref: "../openapi.yaml#/components/links/GetAllQualityMeasurementsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant
        GetAllPlantsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlantsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        GetOnePlantById:
          $ref: "../openapi.yaml#/components/links/GetOnePlantById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        DeleteOnePlantById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlantById"
        # GET /field/{FieldId}/planter
        GetAllPlanterRunsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlanterRunsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}
        GetOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/GetOnePlanterRunById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}
        DeleteOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlanterRunById"
        # GET /field
        GetAllFieldsRedirected:
          $ref: "../openapi.yaml#/components/links/GetAllFieldsRedirected"
        # GET /field/{FieldId}
        GetOneFieldById:
          $ref: "../openapi.yaml#/components/links/GetOneFieldById"
        # DELETE /field/{FieldId}
        DeleteOneFieldById:
          $ref: "../openapi.yaml#/components/links/DeleteOneFieldById"
    "400":
      $ref: "../openapi.yaml#/components/responses/BadRequest"
    "401":
      $ref: "../openapi.yaml#/components/responses/Unauthorized"
    "403":
      $ref: "../openapi.yaml#/components/responses/Forbidden"
    "404":
      description: The specified resource was not found
      links:
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement
        GetAllQualityMeasurementsById:
          $ref: "../openapi.yaml#/components/links/GetAllQualityMeasurementsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant
        GetAllPlantsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlantsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        GetOnePlantById:
          $ref: "../openapi.yaml#/components/links/GetOnePlantById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
        DeleteOnePlantById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlantById"
        # GET /field/{FieldId}/planter
        GetAllPlanterRunsById:
          $ref: "../openapi.yaml#/components/links/GetAllPlanterRunsById"
        # GET /field/{FieldId}/planter/{PlanterRunId}
        GetOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/GetOnePlanterRunById"
        # DELETE /field/{FieldId}/planter/{PlanterRunId}
        DeleteOnePlanterRunById:
          $ref: "../openapi.yaml#/components/links/DeleteOnePlanterRunById"
        # GET /field
        GetAllFieldsRedirected:
          $ref: "../openapi.yaml#/components/links/GetAllFieldsRedirected"
        # GET /field/{FieldId}
        GetOneFieldById:
          $ref: "../openapi.yaml#/components/links/GetOneFieldById"
        # DELETE /field/{FieldId}
        DeleteOneFieldById:
          $ref: "../openapi.yaml#/components/links/DeleteOneFieldById"
    "500":
      $ref: "../openapi.yaml#/components/responses/BackendError"

# PATCH
# If the operation PATCH comes here, you can use the links parameter below.
# You just have to comment it out and place it in the successful response (status code "200").
# No other links have to be added in other operations.
# Have fun!
#
#links:
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement
#  GetAllQualityMeasurementsById:
#    $ref: "../openapi.yaml#/components/links/GetAllQualityMeasurementsById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}
#  GetOneQualityMeasurementById:
#    $ref: "../openapi.yaml#/components/links/GetOneQualityMeasurementById"
#  # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}
#  DeleteOneQualityMeasurementById:
#    $ref: "../openapi.yaml#/components/links/DeleteOneQualityMeasurementById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant
#  GetAllPlantsById:
#    $ref: "../openapi.yaml#/components/links/GetAllPlantsById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
#  GetOnePlantById:
#    $ref: "../openapi.yaml#/components/links/GetOnePlantById"
#  # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
#  DeleteOnePlantById:
#    $ref: "../openapi.yaml#/components/links/DeleteOnePlantById"
#  # GET /field/{FieldId}/planter
#  GetAllPlanterRunsById:
#    $ref: "../openapi.yaml#/components/links/GetAllPlanterRunsById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}
#  GetOnePlanterRunById:
#    $ref: "../openapi.yaml#/components/links/GetOnePlanterRunById"
#  # DELETE /field/{FieldId}/planter/{PlanterRunId}
#  DeleteOnePlanterRunById:
#    $ref: "../openapi.yaml#/components/links/DeleteOnePlanterRunById"
#  # GET /field
#  GetAllFieldsRedirected:
#    $ref: "../openapi.yaml#/components/links/GetAllFieldsRedirected"
#  # GET /field/{FieldId}
#  GetOneFieldById:
#    $ref: "../openapi.yaml#/components/links/GetOneFieldById"
#  # DELETE /field/{FieldId}
#  DeleteOneFieldById:
#    $ref: "../openapi.yaml#/components/links/DeleteOneFieldById"

# PATCH
# If the operation PATCH comes here, you can use the links parameter below.
# You just have to comment it out and place it in the not found response (status code "404").
# No other links have to be added in other operations.
# But attention!!
#   Maybe it is possible (if the patching fails, because the QualityMeasurementId isn't found) to take the patched data and pass it to the POST in quality_measurement_index.yaml.
#   An example for that exists for the PATCH of field.
# Have fun!
#
#links:
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement
#  GetAllQualityMeasurementsById:
#    $ref: "../openapi.yaml#/components/links/GetAllQualityMeasurementsById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant
#  GetAllPlantsById:
#    $ref: "../openapi.yaml#/components/links/GetAllPlantsById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
#  GetOnePlantById:
#    $ref: "../openapi.yaml#/components/links/GetOnePlantById"
#  # DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}
#  DeleteOnePlantById:
#    $ref: "../openapi.yaml#/components/links/DeleteOnePlantById"
#  # GET /field/{FieldId}/planter
#  GetAllPlanterRunsById:
#    $ref: "../openapi.yaml#/components/links/GetAllPlanterRunsById"
#  # GET /field/{FieldId}/planter/{PlanterRunId}
#  GetOnePlanterRunById:
#    $ref: "../openapi.yaml#/components/links/GetOnePlanterRunById"
#  # DELETE /field/{FieldId}/planter/{PlanterRunId}
#  DeleteOnePlanterRunById:
#    $ref: "../openapi.yaml#/components/links/DeleteOnePlanterRunById"
#  # GET /field
#  GetAllFieldsRedirected:
#    $ref: "../openapi.yaml#/components/links/GetAllFieldsRedirected"
#  # GET /field/{FieldId}
#  GetOneFieldById:
#    $ref: "../openapi.yaml#/components/links/GetOneFieldById"
#  # DELETE /field/{FieldId}
#  DeleteOneFieldById:
#    $ref: "../openapi.yaml#/components/links/DeleteOneFieldById"