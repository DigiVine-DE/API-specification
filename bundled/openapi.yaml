openapi: 3.0.3
info:
  title: DigiVine API
  description: REST/CRUD API for the Digivine data warehouse
  version: '0.3'
  contact:
    name: DigiVine
    url: 'https://www.digivine.org/'
    email: info@digivine.org
servers:
  - url: 'http://127.0.0.1/api/v0.3'
externalDocs:
  description: RFC7946 - The GeoJSON format.
  url: 'https://tools.ietf.org/html/rfc7946'
components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: query
      name: api-token
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
          description: A uniquely identifiable code for the error message
          example: FieldLibError
        message:
          type: string
          description: The error message
          example: 'could not connect to DB: could not connect to server: Connection refused'
      required:
        - code
        - message
    BBox:
      type: array
      minItems: 4
      maxItems: 4
      items:
        type: number
      description: |
        This parameter contains information on the coordinate range for its Geometries, Features or FeatureCollections. It describes a bounding box for this. The coordinates are given in the decimal degrees unit. In the following it is described, which value of the array represents which coordinate:
          - The most southwesterly point: Longitude
          - The most southwesterly point: Latitude
          - The most northeasterly point: Longitude
          - The most northeasterly point: Latitude
      externalDocs:
        description: RFC7946 - The GeoJSON format
        url: 'https://tools.ietf.org/html/rfc7946#section-5'
      example:
        - 8.01234567890123
        - 49.0123456789012
        - 8.12345678901234
        - 49.1234567890123
    BBoxWithHeight:
      type: array
      minItems: 6
      maxItems: 6
      items:
        type: number
      description: |
        This parameter contains information on the coordinate range for its Geometries, Features or FeatureCollections. It describes a bounding box for this. The coordinates are given in the decimal degrees unit. The altitude is given in meter. In the following it is described, which value of the array represents which coordinate:
          - The most southwesterly point: Longitude
          - The most southwesterly point: Latitude
          - The most southwesterly point: Altitude
          - The most northeasterly point: Longitude
          - The most northeasterly point: Latitude
          - The most northeasterly point: Altitude
      externalDocs:
        description: RFC7946 - The GeoJSON format
        url: 'https://tools.ietf.org/html/rfc7946#section-5'
      example:
        - 8.01234567890123
        - 49.0123456789012
        - 154.1
        - 8.12345678901234
        - 49.1234567890123
        - 138.2
    MultiPointWithHeight:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPoint
        bbox:
          $ref: '#/components/schemas/BBoxWithHeight'
        coordinates:
          type: array
          items:
            type: array
            minItems: 3
            maxItems: 3
            items:
              type: number
          description: |
            An array of Points with its coordinates and altitudes, given in the decimal degrees unit. The altitude/height is given in meter. In the following it is described, which value of the array represents which coordinate:
              - Longitude
              - Latitude
              - Altitude
          externalDocs:
            description: RFC7946 - The GeoJSON format
            url: 'https://tools.ietf.org/html/rfc7946#section-3.1'
          example:
            - - 8.01234567890123
              - 49.0123456789012
              - 154.1
            - - 8.12345678901234
              - 49.1234567890123
              - 138.2
    Point:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        bbox:
          $ref: '#/components/schemas/BBox'
        coordinates:
          type: array
          minItems: 2
          maxItems: 2
          items:
            type: number
          description: |
            A Point is described by its coordinate, given in the decimal degrees unit. In the following it is described, which value of the array represents which coordinate:
              - Longitude
              - Latitude

            A example, given in the [RFC7946 - The GeoJSON format](https://tools.ietf.org/html/rfc7946#appendix-A.1)
          externalDocs:
            description: RFC7946 - The GeoJSON format
            url: 'https://tools.ietf.org/html/rfc7946#section-3.1.2'
          example:
            - 8
            - 49
    PointWithHeight:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Point
        bbox:
          $ref: '#/components/schemas/BBoxWithHeight'
        coordinates:
          type: array
          minItems: 3
          maxItems: 3
          items:
            type: number
          description: |
            A Point with its height is described by its coordinate, given in the decimal degrees unit, and its altitude, given in meter. In the following it is described, which value of the array represents which coordinate:
              - Longitude
              - Latitude
              - Altitude
          externalDocs:
            description: RFC7946 - The GeoJSON format
            url: 'https://tools.ietf.org/html/rfc7946#section-3.1.2'
          example:
            - 8
            - 49
            - 168
    Polygon:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - Polygon
        bbox:
          $ref: '#/components/schemas/BBox'
        coordinates:
          type: array
          items:
            type: array
            minItems: 4
            items:
              type: array
              minItems: 2
              maxItems: 2
              items:
                type: number
          description: |
            A Polygon is a surface specified by its vertices. The vertices are coordinates, given in the decimal degrees unit. Note the following:
              - The surface vertices are given counterclockwise.
              - Holes in the surface are given clockwise.
              - The last and the first coordinates must be equal.
            In the following it is described, which value of the innermost array represents which coordinate:
              - Longitude
              - Latitude

            A example, given in the [RFC7946 - The GeoJSON format](https://tools.ietf.org/html/rfc7946#appendix-A.3)
          externalDocs:
            description: RFC7946 - The GeoJSON format
            url: 'https://tools.ietf.org/html/rfc7946#section-3.1.6'
          example:
            - - - 8
                - 49
              - - 8.1
                - 49
              - - 8.1
                - 49.1
              - - 8
                - 49.1
              - - 8
                - 49
            - - - 8.08
                - 49.08
              - - 8.08
                - 49.02
              - - 8.02
                - 49.02
              - - 8.02
                - 49.08
              - - 8.08
                - 49.08
    MultiPolygon:
      type: object
      required:
        - type
        - coordinates
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        bbox:
          $ref: '#/components/schemas/BBox'
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                type: array
                minItems: 2
                maxItems: 2
                items:
                  type: number
          description: |
            A Polygon is a surface specified by its vertices. The vertices are coordinates, given in the decimal degrees unit. Note the following:
              - The surface vertices are given counterclockwise.
              - Holes in the surface are given clockwise.
              - The last and the first coordinates must be equal.
            In the following it is described, which value of the innermost array represents which coordinate:
              - Longitude
              - Latitude
            The outermost array includes the various Polygons.
            A example, given in the [RFC7946 - The GeoJSON format](https://tools.ietf.org/html/rfc7946#appendix-A.6)
          externalDocs:
            description: RFC7946 - The GeoJSON format
            url: 'https://tools.ietf.org/html/rfc7946#section-3.1.7'
          example:
            - - - - 8
                  - 49
                - - 8.1
                  - 49
                - - 8.1
                  - 49.1
                - - 8
                  - 49.1
                - - 8
                  - 49
            - - - - 8
                  - 49
                - - 8.1
                  - 49
                - - 8.1
                  - 49.1
                - - 8
                  - 49.1
                - - 8
                  - 49
              - - - 8.08
                  - 49.08
                - - 8.08
                  - 49.02
                - - 8.02
                  - 49.02
                - - 8.02
                  - 49.08
                - - 8.08
                  - 49.08
    Plant:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Point'
        properties:
          type: object
          required:
            - import_key
            - timestamp
            - height
            - deviation
            - speed
            - plant_distance
            - row_distance
            - row_number
          properties:
            id:
              type: integer
              format: int64
              description: The numeric ID of the Plant
              example: 4711
            import_key:
              type: string
              description: Internal key to facilitate error tracing
              example: 1-example_feld1
            timestamp:
              type: string
              format: date-time
              description: 'Timestamp when this plant was planted, given in the format YYYY-MM-DDThh:mm:ss.sssZ (where Y,M,D,h,m,s are variables for the time).'
              externalDocs:
                description: RFC3339 - Date and Time on the Internet - Timestamps
                url: 'https://tools.ietf.org/html/rfc3339'
              example: 1970-01-01T00:00:00.000Z
            height:
              type: number
              description: 'Height above sea level, measured in millimeters'
              externalDocs:
                description: RFC7946 - The GeoJSON format.
                url: 'https://tools.ietf.org/html/rfc7946'
              example: 123000
            deviation:
              type: number
              example: 12.3456789012345
            speed:
              type: number
              description: Planting speed measured in km/h
              example: 1.23456789012345
            plant_distance:
              type: number
              description: 'Distance between two Plants in a row, measured in millimeters'
              example: 1000
            row_distance:
              type: number
              description: 'Distance between two rows, measured in millimeters'
              example: 2000
            row_number:
              type: integer
              format: int32
              description: Number of the row of the Plant
              example: 2
    PlantPatch:
      type: object
      properties:
        import_key:
          type: string
          description: Internal key to facilitate error tracing
          example: 1-example_feld1
        timestamp:
          type: string
          format: date-time
          description: 'Timestamp when this plant was planted, given in the format YYYY-MM-DDThh:mm:ss.sssZ (where Y,M,D,h,m,s are variables for the time).'
          externalDocs:
            description: RFC3339 - Date and Time on the Internet - Timestamps
            url: 'https://tools.ietf.org/html/rfc3339'
          example: 1970-01-01T00:00:00.000Z
        height:
          type: number
          description: 'Height above sea level, measured in millimeters'
          externalDocs:
            description: RFC7946 - The GeoJSON format.
            url: 'https://tools.ietf.org/html/rfc7946'
          example: 123000
        deviation:
          type: number
          example: 12.3456789012345
        speed:
          type: number
          description: Planting speed measured in km/h
          example: 1.23456789012345
        plant_distance:
          type: number
          description: 'Distance between two Plants in a row, measured in millimeters'
          example: 1000
        row_distance:
          type: number
          description: 'Distance between two rows, measured in millimeters'
          example: 2000
        row_number:
          type: integer
          format: int32
          description: Number of the row of the Plant
          example: 2
    PlanterRun:
      type: object
      required:
        - type
        - features
        - properties
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/Plant'
          description: An array containing the planted Plants of this Planter Run.
        bbox:
          $ref: '#/components/schemas/BBox'
        properties:
          type: object
          required:
            - user_id
            - terminal_id
            - field_id
          properties:
            id:
              type: integer
              format: int64
              description: The numeric ID of the Planter Run
              example: 4711
            user_id:
              type: integer
              format: int64
              description: The numeric ID of the User who planted
              example: 815
            terminal_id:
              type: integer
              format: int64
              description: The numeric ID of the Terminal of the Machine that planted
              example: 42
            field_id:
              type: integer
              format: int64
              description: The numeric ID of the Field on which the Planter Run is performed.
              example: 4711
    Field:
      type: object
      required:
        - type
        - features
        - properties
        - planter_runs
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/MultiPolygon'
        planter_runs:
          type: array
          items:
            $ref: '#/components/schemas/PlanterRun'
          description: An array with data on planting
        properties:
          type: object
          properties:
            id:
              type: integer
              format: int64
              description: The numeric ID of the field
              example: 4711
            name:
              type: string
              description: Field location
              example: Dürkheimer Michelsberg
            station_id:
              type: integer
              format: int64
              description: The numeric ID of the station that makes Forecasts for a group of Fields.
              example: 4711
            historical_station_id:
              type: integer
              format: int64
              description: The numeric ID of the historical weather station associated with the fields.
              example: 4711
            number:
              type: string
              description: The Number of the Field (not the ID)
              example: 471/1
            size:
              type: number
              format: double
              description: Size of the Field given in square meters
              example: 47.11
            fruit_name:
              type: string
              description: Name of the fruit on this Field
              example: Riesling
    FieldPatch:
      type: object
      properties:
        name:
          type: string
          description: Field location
          example: Dürkheimer Michelsberg
        station_id:
          type: integer
          format: int64
          description: The numeric ID of the station that makes Forecasts for a group of Fields.
          example: 4711
        historical_station_id:
          type: integer
          format: int64
          description: The numeric ID of the historical weather station associated with the fields.
          example: 4711
        number:
          type: string
          description: The Number of the Field (not the ID)
          example: 471/1
        size:
          type: number
          format: double
          description: Size of the Field given in square meters
          example: 47.11
        fruit_name:
          type: string
          description: Name of the fruit on this Field
          example: Riesling
    Forecast:
      type: object
      required:
        - group_id
        - station_id
        - station
        - field_ids
        - model_id
        - model
        - query_timestamp
        - time_span_start
        - time_span_end
        - measurement_rate
        - measurements
      properties:
        id:
          type: integer
          format: int64
          description: The numeric ID of the Forecast
          example: 4711
        group_id:
          type: integer
          format: int64
          description: Notice. This information will soon no longer be used and sent along!
          example: 1
        station_id:
          type: integer
          format: int64
          description: The numeric ID of the station that makes Forecasts for a group of Fields.
          example: 4711
        station:
          type: string
          description: Name of the measuring station
          example: Bad Dürkheim
        field_ids:
          type: array
          items:
            type: integer
            format: int64
          description: An array containing the IDs of the Fields for which the Forecast is.
          example:
            - 4711
            - 815
        model_id:
          type: integer
          format: int64
          description: The numeric ID of the model
          example: 17
        model:
          type: string
          description: Name of the model
          example: Traubenwickler
        query_timestamp:
          type: string
          format: date-time
          description: 'Time of retrieval of the data from an external source, given in the format YYYY-MM-DDThh:mm:ss.sssZ (where Y,M,D,h,m,s are variables for the time).'
          externalDocs:
            description: RFC3339 - Date and Time on the Internet - Timestamps
            url: 'https://tools.ietf.org/html/rfc3339'
          example: '1970-01-01T00:00:00.000Z'
        time_span_start:
          type: string
          format: date
          description: 'Start time of the measurement, given in the format YYYY-MM-DDThh:mm:ssZ (where Y,M,D,h,m,s are variables for the time).'
          externalDocs:
            description: RFC3339 - Date and Time on the Internet - Timestamps
            url: 'https://tools.ietf.org/html/rfc3339'
          example: '2000-01-01T00:00:00Z'
        time_span_end:
          type: string
          format: date
          description: 'End time of the measurement, given in the format YYYY-MM-DDThh:mm:ssZ (where Y,M,D,h,m,s are variables for the time).'
          externalDocs:
            description: RFC3339 - Date and Time on the Internet - Timestamps
            url: 'https://tools.ietf.org/html/rfc3339'
          example: '2000-12-31T23:59:59Z'
        measurement_rate:
          type: string
          enum:
            - Daily
          description: Rate of the measurement
          example: Daily
        measurements:
          type: array
          items:
            $ref: '#/components/schemas/ForecastMeasurement'
          description: An array of measurements
    ForecastMeasurement:
      type: object
      required:
        - time
        - values
      properties:
        id:
          type: integer
          format: int64
          description: The numeric ID of the Measurement
          example: 4711
        time:
          type: string
          format: date-time
          description: 'Time of measurement, given in the format YYYY-MM-DDThh:mm:ssZ (where Y,M,D,h,m,s are variables for the time).'
          externalDocs:
            description: RFC3339 - Date and Time on the Internet - Timestamps
            url: 'https://tools.ietf.org/html/rfc3339'
          example: '1970-01-01T00:00:00Z'
        values:
          type: object
          description: An object containing the values of the measurement.
    QualityMeasurement:
      type: object
      required:
        - id
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Point'
        properties:
          type: object
          required:
            - plant_id
            - timestamp
            - device
            - measurement_uuid
            - tartaric_aid
            - malic_acid
            - fructose
            - glucose
          properties:
            id:
              type: integer
              format: int64
              description: The numeric ID of the Quality Measurement
              example: 4711
            plant_id:
              type: integer
              format: int64
              description: The numeric ID of the Plant
              example: 815
            timestamp:
              type: string
              format: date-time
              description: 'Timestamp when the Measurement was taken, given in the format YYYY-MM-DDThh:mm:ss.sssZ (where Y,M,D,h,m,s are variables for the time).'
              externalDocs:
                description: 'RFC3339 - Date and Time on the Internet: Timestamps'
                url: 'https://tools.ietf.org/html/rfc3339'
              example: 1970-01-01T00:00:00.000Z
            device:
              type: string
              description: 'Device id, needed for e.g. assigning the device to a customer/user'
              example: device
            measurement_uuid:
              type: string
              format: uuid
              description: A Universally Unique IDentifier (UUID) of the Measurement
              externalDocs:
                description: RFC4122 - A Universally Unique IDentifier (UUID) URN Namespace
                url: 'https://tools.ietf.org/html/rfc4122'
              example: 550e8400-e29b-11d4-a716-446655440000
            tartaric_acid:
              type: number
              format: double
              description: 'The tartaric acid concentration, measured in g/L'
              example: 12.143932980502946
            malic_acid:
              type: number
              format: double
              description: 'The malic acid concentration, measured in g/L'
              example: 18.116626216683184
            fructose:
              type: number
              format: double
              description: 'The fructose concentration, measured in g/L'
              example: 11.82997665663333
            glucose:
              type: number
              format: double
              description: 'The glucose concentration, measured in g/L'
              example: 4.567645886934765
    Terrain:
      type: object
      required:
        - id
        - type
        - geometry
        - properties
      properties:
        id:
          type: integer
          format: int64
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/MultiPointWithHeight'
        properties:
          type: object
          required:
            - description
          properties:
            description:
              type: string
            field_id:
              type: integer
              format: int64
    HarvestTask:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Polygon'
        properties:
          type: object
          required:
            - task_id
            - task_name
            - customer_name
            - fruit_group_name
            - fruit_name
            - plain_name
            - plain_size
          properties:
            task_id:
              type: integer
              format: int64
              description: The numeric ID of the Harvest Task
              example: 4711
            task_name:
              type: string
              description: Name of the task
              example: Ernte
            customer_name:
              type: string
              description: Name of the customer
              example: Julius Kühn-Institut
            farm_name:
              type: string
              description: Name of the farm
              example: Geilweilerhof
            fruit_group_name:
              type: string
              description: Name of the fruit group
              example: Traube
            fruit_name:
              type: string
              description: Name of the specific fruit
              example: Riesling
            plain_name:
              type: string
              description: Name of the plains
              example: Auf dem Weinberg
            plain_size:
              type: integer
              format: int64
              description: Size of the plains in square meter
              example: 7668
            yield_total_mass:
              type: integer
              format: int64
              description: The mass of the harvest yield in kilogram
              example: 7568
            total_area:
              type: integer
              format: int64
              description: The total area of the harvest task in square meter
              example: 5874
            effective_total_distance:
              type: integer
              format: int64
              description: The effective distance travelled by the harvester in meter
              example: 2580
            effective_total_time:
              type: integer
              format: int64
              description: The effective total time of the harvesting run in minutes
              example: 95
    Harvest:
      type: object
      required:
        - type
        - features
        - properties
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/HarvestMeasurement'
          description: An array containing the measurements taken during the harvest task.
        properties:
          type: object
          required:
            - task_id
            - task_name
            - customer_name
            - fruit_group_name
            - fruit_name
            - plain_name
            - plain_size
          properties:
            task_id:
              type: integer
              format: int64
              description: The numeric ID of the Harvest Task
              example: 4711
            task_name:
              type: string
              description: Name of the task
              example: Ernte
            customer_name:
              type: string
              description: Name of the customer
              example: Julius Kühn-Institut
            farm_name:
              type: string
              description: Name of the farm
              example: Geilweilerhof
            fruit_group_name:
              type: string
              description: Name of the fruit group
              example: Traube
            fruit_name:
              type: string
              description: Name of the specific fruit
              example: Riesling
            plain_name:
              type: string
              description: Name of the plains
              example: Auf dem Weinberg
            plain_size:
              type: integer
              format: int64
              description: Size of the plains in square meter
              example: 7668
            yield_total_mass:
              type: integer
              format: int64
              description: The mass of the harvest yield in kilogram
              example: 7568
            total_area:
              type: integer
              format: int64
              description: The total area of the harvest task in square meter
              example: 5874
            effective_total_distance:
              type: integer
              format: int64
              description: The effective distance travelled by the harvester in meter
              example: 2580
            effective_total_time:
              type: integer
              format: int64
              description: The effective total time of the harvesting run in minutes
              example: 95
            average_tartaric_acid:
              type: integer
              format: int64
              description: Average tartaric acid content of the harvested fruits in g/L
              example: 23
            average_malic_acid:
              type: integer
              format: int64
              description: Average malic acid content of the harvested fruits in g/L
              example: 23
            average_glucose:
              type: integer
              format: int64
              description: Average glucose content of the harvested fruits in g/L
              example: 7
            average_fructose:
              type: integer
              format: int64
              description: Average fructose content of the harvested fruits in g/L
              example: 7
    HarvestOrTask:
      type: object
      required:
        - type
        - properties
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
            - Feature
        features:
          type: array
          items:
            $ref: '#/components/schemas/HarvestMeasurement'
          description: An array containing the measurements taken during the harvest task.
        geometry:
          $ref: '#/components/schemas/Polygon'
        properties:
          type: object
          required:
            - task_id
            - task_name
            - customer_name
            - fruit_group_name
            - fruit_name
            - plain_name
            - plain_size
          properties:
            task_id:
              type: integer
              format: int64
              description: The numeric ID of the Harvest Task
              example: 4711
            task_name:
              type: string
              description: Name of the task
              example: Ernte
            customer_name:
              type: string
              description: Name of the customer
              example: Julius Kühn-Institut
            farm_name:
              type: string
              description: Name of the farm
              example: Geilweilerhof
            fruit_group_name:
              type: string
              description: Name of the fruit group
              example: Traube
            fruit_name:
              type: string
              description: Name of the specific fruit
              example: Riesling
            plain_name:
              type: string
              description: Name of the plains
              example: Auf dem Weinberg
            plain_size:
              type: integer
              format: int64
              description: Size of the plains in square meter
              example: 7668
            yield_total_mass:
              type: integer
              format: int64
              description: The mass of the harvest yield in kilogram
              example: 7568
            total_area:
              type: integer
              format: int64
              description: The total area of the harvest task in square meter
              example: 5874
            effective_total_distance:
              type: integer
              format: int64
              description: The effective distance travelled by the harvester in meter
              example: 2580
            effective_total_time:
              type: integer
              format: int64
              description: The effective total time of the harvesting run in minutes
              example: 95
            average_tartaric_acid:
              type: integer
              format: int64
              description: Average tartaric acid content of the harvested fruits in g/L
              example: 23
            average_malic_acid:
              type: integer
              format: int64
              description: Average malic acid content of the harvested fruits in g/L
              example: 23
            average_glucose:
              type: integer
              format: int64
              description: Average glucose content of the harvested fruits in g/L
              example: 7
            average_fructose:
              type: integer
              format: int64
              description: Average fructose content of the harvested fruits in g/L
              example: 7
    HarvestMeasurement:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Point'
        properties:
          type: object
          required:
            - acid
            - sugar
          properties:
            acid:
              type: integer
              format: int64
              description: Acid content of the harvested fruits in g/L
              example: 23
            sugar:
              type: integer
              format: int64
              description: Sugar content of the harvested fruits in g/L
              example: 7
            spectral:
              type: string
    SprayTask:
      type: object
      required:
        - type
        - geometry
        - properties
      properties:
        type:
          type: string
          enum:
            - Feature
        geometry:
          $ref: '#/components/schemas/Polygon'
        properties:
          type: object
          required:
            - task_id
            - task_name
            - customer_name
            - fruit_group_name
            - fruit_name
            - plain_name
            - plain_size
            - plant_protection
          properties:
            task_id:
              type: integer
              format: int64
              description: The numeric ID of the Harvest Task
              example: 4711
            task_name:
              type: string
              description: Name of the task
              example: Ernte
            customer_name:
              type: string
              description: Name of the customer
              example: Julius Kühn-Institut
            farm_name:
              type: string
              description: Name of the farm
              example: Geilweilerhof
            fruit_group_name:
              type: string
              description: Name of the fruit group
              example: Traube
            fruit_name:
              type: string
              description: Name of the specific fruit
              example: Riesling
            plain_name:
              type: string
              description: Name of the plains
              example: Auf dem Weinberg
            plain_size:
              type: integer
              format: int64
              description: Size of the plains in square meter
              example: 7668
            application_total_volume:
              type: integer
              format: int64
              description: The total volume of protection sprayed
              example: 7568
            total_area:
              type: integer
              format: int64
              description: The total area of the spray task in square meter
              example: 5874
            effective_total_distance:
              type: integer
              format: int64
              description: The effective distance travelled by the spray machine in meter
              example: 2580
            effective_total_time:
              type: integer
              format: int64
              description: The effective total time of the spray run in minutes
              example: 95
            plant_protection:
              type: array
              items:
                type: object
                properties:
                  name:
                    type: string
                    description: Name of the protection fluid
                    example: Mospilan
                  amount:
                    type: integer
                    format: int64
                    description: Amount of the protection fluid
                    example: 375
                  unit:
                    type: string
                    description: Unit of the protection fluid amount
                    example: g/ha
    Token:
      type: object
      description: An object representing a token.
      properties:
        tokenstr:
          type: string
          description: The token string.
        user_id:
          type: integer
          format: int32
          description: The ID of the user associated with the token.
      required:
        - tokenstr
        - user_id
    TokenId:
      type: object
      properties:
        id:
          type: integer
          format: int32
          description: Numeric ID of the Token.
    UserToken:
      type: object
      description: An object representing a user token.
      properties:
        tokenstr:
          type: string
          description: The token string.
      required:
        - tokenstr
    AccessRight:
      type: object
      properties:
        path:
          type: string
          description: |
            The path to give access to. `%` can be used as wildcard character with
        read_only:
          type: boolean
          description: Whether the access is read-only.
      required:
        - path
        - read_only
    Cultivar:
      type: object
      description: An object representing a cultivar.
      properties:
        id:
          type: integer
          format: int32
          description: 'The ID of the cultivar. If it is used to insert a new cultivar, this value will be ignored.'
        cultivar_name:
          type: string
          description: The name of the cultivar.
        prime_name:
          type: string
          description: The prime name of the cultivar.
        variety_number:
          type: integer
          format: int32
          description: The variety number of the cultivar.
        species:
          type: string
          description: The species of the cultivar.
        color:
          type: string
          description: The color of the berry skin.
        country_or_region:
          type: string
          description: The country or region of origin of the variety.
      required:
        - cultivar_name
        - prime_name
        - variety_number
    CultivarPatch:
      type: object
      properties:
        cultivar_name:
          type: string
          description: The name of the cultivar.
          example: 08319-07
        prime_name:
          type: string
          description: The prime name of the cultivar.
          example: DAVIS 08319- 07
        variety_number:
          type: integer
          format: int32
          description: The variety number of the cultivar.
          example: 27508
        species:
          type: string
          description: The species of the cultivar.
          example: VITIS VINIFERA LINNÉ SUBSP. SATIVA (DE CANDOLLE) HEGI
        color:
          type: string
          description: The color of the berry skin.
          example: NOIR
        country_or_region:
          type: string
          description: The country or region of origin of the variety.
          example: Germany
    QualityLevel:
      type: integer
      description: |
        The quality control procedure applied for a data report. 1 is the worst and 10 is the best. For details check the [document](https://opendata.dwd.de/climate_environment/CDC/observations_germany/climate/daily/kl/historical/DESCRIPTION_obsgermany_climate_daily_kl_historical_en.pdf)
          * `1` - Only formal control
          * `2` - Controlled with individually defined criteria
          * `3` - Automatic control and correction
          * `5` - Historic, subjective procedures
          * `7` - Second control done, before correction
          * `8` - Quality control outside routine
          * `9` - Not all parameters corrected
          * `10` - Quality control finished, all corrections finished  
      nullable: false
      enum:
        - 1
        - 2
        - 3
        - 5
        - 7
        - 8
        - 9
        - 10
    WeatherData:
      type: object
      properties:
        station_id:
          type: integer
          format: int32
          description: The ID of the weather station.
        measurement_date:
          type: string
          format: date
          description: The reference date of the weather data.
        fx:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily maximum of wind gust (m/s).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        fm:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily mean of wind velocity (m/s).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        rsk:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily precipitation height (mm).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        rskf:
          type: integer
          description: Precipitation form (numerical code).
        sdk:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily sunshine duration (h).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        shk_tag:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily snow depth (cm).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        nm:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily mean of cloud cover (1/8).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        vpm:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily mean of vapor pressure (hPa).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        pm:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily mean of pressure (hPa).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        tmk:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily mean of temperature (°C).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        upm:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily mean of relative humidity (%).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        txk:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily maximum of temperature at 2 m height (°C).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        tnk:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily minimum of temperature at 2 m height (°C).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
        tgk:
          type: object
          properties:
            value:
              type: number
              format: double
              description: Daily minimum of air temperature at 5 cm above ground (°C).
            quality_level:
              $ref: '#/components/schemas/QualityLevel'
      required:
        - station_id
        - measurement_date
    WeatherDataPatch:
      type: object
      description: An object representing the patch of weather data
      properties:
        fx:
          type: number
          format: double
          description: Daily maximum of wind gust (m/s).
        fx_qn:
          type: integer
          format: int16
          description: Quality level of daily maximum of wind gust.
        fm:
          type: number
          format: double
          description: Daily mean of wind velocity (m/s).
        fm_qn:
          type: integer
          format: int16
          description: Quality level of daily mean of wind velocity.
        rsk:
          type: number
          format: double
          description: Daily precipitation height (mm).
        rsk_qn:
          type: integer
          format: int16
          description: Quality level of daily precipitation height.
        rskf:
          type: integer
          description: Precipitation form (numerical code).
        sdk:
          type: number
          format: double
          description: Daily sunshine duration (h).
        sdk_qn:
          type: integer
          format: int16
          description: Quality level of daily sunshine duration.
        shk_tag:
          type: number
          format: double
          description: Daily snow depth (cm).
        shk_tag_qn:
          type: integer
          format: int16
          description: Quality level of daily snow depth.
        nm:
          type: number
          format: double
          description: Daily mean of cloud cover (1/8).
        nm_qn:
          type: integer
          format: int16
          description: Quality level of daily mean of cloud cover.
        vpm:
          type: number
          format: double
          description: Daily mean of vapor pressure (hPa).
        vpm_qn:
          type: integer
          format: int16
          description: Quality level of daily mean of vapor pressure.
        pm:
          type: number
          format: double
          description: Daily mean of pressure (hPa).
        pm_qn:
          type: integer
          format: int16
          description: Quality level of daily mean of pressure.
        tmk:
          type: number
          format: double
          description: Daily mean of temperature (°C).
        tmk_qn:
          type: integer
          format: int16
          description: Quality level of daily mean of temperature.
        upm:
          type: number
          format: double
          description: Daily mean of relative humidity (%).
        upm_qn:
          type: integer
          format: int16
          description: Quality level of daily mean of relative humidity.
        txk:
          type: number
          format: double
          description: Daily maximum of temperature at 2 m height (°C).
        txk_qn:
          type: integer
          format: int16
          description: Quality level of daily maximum of temperature at 2 m height.
        tnk:
          type: number
          format: double
          description: Daily minimum of temperature at 2 m height (°C).
        tnk_qn:
          type: integer
          format: int16
          description: Quality level of daily minimum of temperature at 2 m height.
        tgk:
          type: number
          format: double
          description: Daily minimum of air temperature at 5 cm above ground (°C).
        tgk_qn:
          type: integer
          format: int16
          description: Quality level of daily minimum of air temperature at 5 cm above ground.
    WeatherStation:
      type: object
      description: An object representing a weather station.
      properties:
        id:
          type: integer
          format: int32
          description: The ID of the weather station.
        name:
          type: string
          description: The name of the weather station.
        bundesland:
          type: string
          description: The Bundesland where the weather station is located.
        geometry:
          $ref: '#/components/schemas/PointWithHeight'
      required:
        - id
    WeatherStationPatch:
      type: object
      description: An object representing the patch of a weather station.
      properties:
        station_name:
          type: string
          description: The name of the weather station.
        station_bundesland:
          type: string
          description: The Bundesland where the weather station is located.
        station_elevation:
          type: integer
          format: int32
          description: The elevation of the weather station.
        station_latitude:
          type: number
          format: double
          description: The latitude of the weather station.
        station_longitude:
          type: number
          format: double
          description: The longitude of the weather station.
  parameters:
    Limit:
      name: limit
      in: query
      description: The number of items to return
      schema:
        type: integer
        default: 100
        minimum: 1
      examples:
        min:
          value: 1
          summary: 'The minimum number of items, which can be returned.'
        default:
          value: 100
          summary: 'The default number of items, which will be returned, if no value is given for the limit parameter.'
        other:
          value: 815
          summary: Another example for the limit parameter.
    Offset:
      name: offset
      in: query
      description: The number of items to skip before starting to collect the result set
      schema:
        type: integer
        default: 0
        minimum: 0
      examples:
        min:
          value: 0
          summary: 'The minimum number of items, which can be skipped before returning.'
        default:
          value: 0
          summary: 'The default number of items, which will be skipped before returning, if no value is given for the limit parameter.'
        other:
          value: 815
          summary: Another example for the offset parameter.
    Box2d:
      name: box2d
      in: query
      required: false
      description: The two-dimensional geometry bounding box
      schema:
        $ref: '#/components/schemas/BBox'
    FuzzyFieldKeywords:
      name: fuzzyFieldKeywords
      in: query
      required: false
      description: A set of keywords used to filter the results of fields. Only fields with at least one string attribute containing one of the keywords (case insensitive) will be returned.
      schema:
        type: array
        items:
          type: string
      examples:
        default:
          value: []
          summary: An empty array has no effect on the results
        example1:
          value:
            - Burg
          summary: 'This will find fields with names like "Burgunder", "Hamburg", and "Hamburger", but not "Berg"'
        example2:
          value:
            - Dürk
            - Ries
          summary: 'This will find fields with names like "Dürkheimer Michelsberg" and/or fruit names like "Riesling", but not field with name "Hamburg" and fruit names "Dornfelder"'
    FruitNameContains:
      name: fruitNameContains
      in: query
      required: false
      description: A set of keywords used to filter the results of fields. Only fields with a fruit_name containing all of the specified keywords (case insensitive) will be returned.
      schema:
        type: array
        items:
          type: string
      examples:
        default:
          value: []
          summary: An empty array has no effect on the results
        example1:
          value:
            - ries
            - ing
          summary: 'This will find fields with fruit names like "Riesling", but not fields with fruit names like "Chardonnay" or "Ries"'
    FieldNameContains:
      name: fieldNameContains
      in: query
      required: false
      description: A set of keywords used to filter the results of fields. Only fields with a name containing all of the specified keywords (case insensitive) will be returned.
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
      examples:
        default:
          value: []
          summary: An empty array has no effect on the results
        example1:
          value:
            - Mich
            - dürk
          summary: 'This will find fields with names like "Dürkheimer Michelsberg", but not fields with names like "Michelsberg"'
    Tokenstr:
      name: Tokenstr
      in: path
      description: The token string of the token to retrieve
      required: true
      schema:
        type: string
    TokenstrContains:
      name: tokenstrContains
      in: query
      required: false
      description: A set of keywords used to filter tokens. Only tokens that contain all of the specified keywords (case insensitive) will be returned.
      schema:
        type: array
        items:
          type: string
        uniqueItems: true
      examples:
        default:
          value: []
          summary: An empty array has no effect on the results
        example1:
          value:
            - all
            - readonly
          summary: 'This will find tokens like "all_readonly", but not tokens like "all"'
    AccessRightPath:
      name: AccessRightPath
      in: path
      description: The path of the access right
      required: true
      schema:
        type: string
    FieldId:
      name: FieldId
      in: path
      required: true
      description: The numeric ID of the field
      schema:
        type: integer
        format: int64
        example: 4711
    UserId:
      name: UserId
      in: path
      required: true
      description: The numeric ID of the user
      schema:
        type: integer
        format: int32
        example: 4711
    ForecastId:
      name: ForecastId
      in: path
      required: true
      description: The numeric ID of the forecast
      schema:
        type: integer
        format: int64
        example: 4711
    PlantId:
      name: PlantId
      in: path
      required: true
      description: The numeric ID of the plant
      schema:
        type: integer
        format: int64
        example: 4711
    PlanterRunId:
      name: PlanterRunId
      in: path
      required: true
      description: The numeric ID of the planter run
      schema:
        type: integer
        format: int64
        example: 4711
    QualityMeasurementId:
      name: QualityMeasurementId
      in: path
      required: true
      description: The numeric ID of the quality measurement
      schema:
        type: integer
        format: int64
        example: 4711
    TerrainId:
      name: TerrainId
      in: path
      required: true
      description: The numeric ID of the terrain model
      schema:
        type: integer
        format: int64
        example: 4711
    HarvestTaskId:
      name: HarvestTaskId
      in: path
      required: true
      description: The numeric ID of the Harvest Task
      schema:
        type: integer
        format: int64
        example: 4711
    SprayTaskId:
      name: SprayTaskId
      in: path
      required: true
      description: The numeric ID of the Spray Task
      schema:
        type: integer
        format: int64
        example: 4711
    CultivarId:
      name: CultivarId
      in: path
      required: true
      description: The numeric ID of the Cultivar
      schema:
        type: integer
        format: int32
        example: 4711
    WeatherStationId:
      name: WeatherStationId
      in: path
      required: true
      description: The numeric ID of the weather station
      schema:
        type: integer
        format: int32
        example: 4711
    MeasurementDate:
      name: MeasurementDate
      in: path
      required: true
      description: The reference date for the weather data
      schema:
        type: string
        format: date
  responses:
    BackendError:
      description: Backend Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Missing API key.
    NotFound:
      description: The specified resource was not found
    MethodNotAllowed:
      description: Method not allowed
    Forbidden:
      description: Specified API key does not have the required rights.
    BadRequest:
      description: 'Bad Request: Could not parse parameters'
      content:
        application/json:
          schema:
            type: object
            required:
              - error
            properties:
              error:
                type: string
    SeeOther:
      description: See Other
      headers:
        Location:
          description: 'The server is redirecting the user agent to a different resource, as indicated by a URI in the Location header field, which is intended to provide an indirect response to the original request.'
          schema:
            type: string
  links:
    GetAllTokensRedirected:
      operationId: getAllTokens
      description: |
        `GET /token` (see also `getAllTokens`). Returns a list of (all) stored Tokens.
    GetAllFieldsRedirected:
      operationId: getAllFields
      description: |
        `GET /field` (see also `getAllFields`). Returns a list of (all) stored Fields.
    GetOneFieldById:
      operationId: getOneField
      parameters:
        FieldId: $request.path.FieldId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /field/{FieldId}` (see also `getOneField`). Returns a specific stored Field.
    GetOneFieldByIdFromResponse:
      operationId: getOneField
      parameters:
        FieldId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /field/{FieldId}` (see also `getOneField`). Returns a specific stored Field.
    DeleteOneFieldById:
      operationId: deleteOneField
      parameters:
        FieldId: $request.path.FieldId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /field/{FieldId}` (see also `deleteOneField`). Deletes a specific stored Field.
    DeleteOneFieldByIdFromResponse:
      operationId: deleteOneField
      parameters:
        FieldId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /field/{FieldId}` (see also `deleteOneField`). Deletes a specific stored Field.
    GetAllPlanterRunsById:
      operationId: getAllPlanterRuns
      parameters:
        FieldId: $request.path.FieldId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /field/{FieldId}/planter` (see also `getAllPlanterRuns`). Returns a list of (all) stored Planter Runs for the given Field.
    GetAllPlanterRunsByIdFromResponse:
      operationId: getAllPlanterRuns
      parameters:
        FieldId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /field/{FieldId}/planter` (see also `getAllPlanterRuns`). Returns a list of (all) stored Planter Runs for the given Field.
    GetOnePlanterRunById:
      operationId: getOnePlanterRun
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}` (see also `getOnePlanterRun`). Returns a specific stored Planter Run.
    GetOnePlanterRunByIdFromResponse:
      operationId: getOnePlanterRun
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}` (see also `getOnePlanterRun`). Returns a specific stored Planter Run.
    DeleteOnePlanterRunById:
      operationId: deleteOnePlanterRun
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `DELETE /field/{FieldId}/planter/{PlanterRunId}` (see also `deleteOnePlanterRun`). Deletes a specific stored Planter Run.
    DeleteOnePlanterRunByIdFromResponse:
      operationId: deleteOnePlanterRun
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `DELETE /field/{FieldId}/planter/{PlanterRunId}` (see also `deleteOnePlanterRun`). Deletes a specific stored Planter Run.
    GetAllPlantsById:
      operationId: getAllPlants
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant` (see also `getAllPlants`). Returns a list of (all) stored Plants for the given Planter Run.
    GetAllPlantsByIdFromResponse:
      operationId: getAllPlants
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant` (see also `getAllPlants`). Returns a list of (all) stored Plants for the given Planter Run.
    GetOnePlantById:
      operationId: getOnePlant
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}` (see also `getOnePlant`). Returns a specific stored Plant.
    GetOnePlantByIdFromResponse:
      operationId: getOnePlant
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}` (see also `getOnePlant`). Returns a specific stored Plant.
    DeleteOnePlantById:
      operationId: deleteOnePlant
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}` (see also `deleteOnePlant`). Deletes a specific stored Plant.
    DeleteOnePlantByIdFromResponse:
      operationId: deleteOnePlant
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}` (see also `deleteOnePlant`). Deletes a specific stored Plant.
    GetAllQualityMeasurementsById:
      operationId: getAllQualityMeasurements
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement` (see also `getAllQualityMeasurements`). Returns a list of (all) stored Quality Measurements for the given Plant.
    GetAllQualityMeasurementsByIdFromResponse:
      operationId: getAllQualityMeasurements
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement` (see also `getAllQualityMeasurements`). Returns a list of (all) stored Quality Measurements for the given Plant.
    GetOneQualityMeasurementById:
      operationId: getOneQualityMeasurement
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
        QualityMeasurementId: $request.path.QualityMeasurementId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}` (see also `getOneQualityMeasurement`). Returns a specific stored Quality Measurement.
    GetOneQualityMeasurementByIdFromResponse:
      operationId: getOneQualityMeasurement
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
        QualityMeasurementId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `GET /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}` (see also `getOneQualityMeasurement`). Returns a specific stored Quality Measurement.
    DeleteOneQualityMeasurementById:
      operationId: deleteOneQualityMeasurement
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
        QualityMeasurementId: $request.path.QualityMeasurementId
      description: |
        The `id` values given in the request can be used as the `id` parameters in `DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}` (see also `deleteOneQualityMeasurement`). Deletes a specific stored Quality Measurement.
    DeleteOneQualityMeasurementByIdFromResponse:
      operationId: deleteOneQualityMeasurement
      parameters:
        FieldId: $request.path.FieldId
        PlanterRunId: $request.path.PlanterRunId
        PlantId: $request.path.PlantId
        QualityMeasurementId: $response.body#/id
      description: |
        The `id` values given in the request and returned in the response can be used as the `id` parameters in `DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}` (see also `deleteOneQualityMeasurement`). Deletes a specific stored Quality Measurement.
    GetAllForecastsRedirected:
      operationId: getAllForecasts
      description: |
        `GET /forecast` (see also `getAllForecasts`). Returns a list of (all) stored Forecasts.
    GetOneForecastById:
      operationId: getOneForecast
      parameters:
        ForecastId: $request.path.ForecastId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /forecast/{ForecastId}` (see also `getOneForecast`). Returns a specific stored Forecast.
    GetOneForecastByIdFromResponse:
      operationId: getOneForecast
      parameters:
        ForecastId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /forecast/{ForecastId}` (see also `getOneForecast`). Returns a specific stored Forecast.
    DeleteOneForecastById:
      operationId: deleteOneForecast
      parameters:
        ForecastId: $request.path.ForecastId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /forecast/{ForecastId}` (see also `deleteOneForecast`). Deletes a specific stored Forecast.
    DeleteOneForecastByIdFromResponse:
      operationId: deleteOneForecast
      parameters:
        ForecastId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /forecast/{ForecastId}` (see also `deleteOneForecast`). Deletes a specific stored Forecast.
    GetAllTerrainsRedirected:
      operationId: getAllTerrains
      description: |
        `GET /terrain` (see also `getAllTerrains`). Returns a list of (all) stored Terrains.
    GetOneTerrainById:
      operationId: getOneTerrain
      parameters:
        TerrainId: $request.path.TerrainId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /terrain/{TerrainId}` (see also `getOneTerrain`). Returns a specific stored Terrain.
    GetOneTerrainByIdFromResponse:
      operationId: getOneTerrain
      parameters:
        TerrainId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /terrain/{TerrainId}` (see also `getOneTerrain`). Returns a specific stored Terrain.
    DeleteOneTerrainById:
      operationId: deleteOneTerrain
      parameters:
        TerrainId: $request.path.TerrainId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /terrain/{TerrainId}` (see also `deleteOneTerrain`). Deletes a specific stored Terrain.
    DeleteOneTerrainByIdFromResponse:
      operationId: deleteOneTerrain
      parameters:
        TerrainId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /terrain/{TerrainId}` (see also `deleteOneTerrain`). Deletes a specific stored Terrain.
    GetAllScheduledHarvestTasksRedirected:
      operationId: getAllScheduledHarvestTasks
      description: |
        `GET /harvest/task` (see also `getAllScheduledHarvestTasks`). Returns a list of (all) stored scheduled Harvest Tasks.
    GetOneScheduledHarvestTaskById:
      operationId: getOneScheduledHarvestTask
      parameters:
        HarvestTaskId: $request.path.HarvestTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /harvest/task/{HarvestTaskId}` (see also `getOneScheduledHarvestTask`). Returns a specific stored scheduled Harvest Task.
    GetOneScheduledHarvestTaskByIdFromResponse:
      operationId: getOneScheduledHarvestTask
      parameters:
        HarvestTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /harvest/task/{HarvestTaskId}` (see also `getOneScheduledHarvestTask`). Returns a specific stored scheduled Harvest Task.
    DeleteOneScheduledHarvestTaskById:
      operationId: deleteOneScheduledHarvestTask
      parameters:
        HarvestTaskId: $request.path.HarvestTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /harvest/task/{HarvestTaskId}` (see also `deleteOneScheduledHarvestTask`). Deletes a specific stored scheduled Harvest Task.
    DeleteOneScheduledHarvestTaskByIdFromResponse:
      operationId: deleteOneScheduledHarvestTask
      parameters:
        HarvestTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /harvest/task/{HarvestTaskId}` (see also `deleteOneScheduledHarvestTask`). Deletes a specific stored scheduled Harvest Task.
    GetAllCompletedHarvestTasksRedirected:
      operationId: getAllCompletedHarvestTasks
      description: |
        `GET /harvest/complete` (see also `getAllCompletedHarvestTasks`). Returns a list of (all) stored completed Harvest Tasks and Harvests with Harvest Measurements.
    GetOneCompletedHarvestTaskById:
      operationId: getOneCompletedHarvestTask
      parameters:
        HarvestTaskId: $request.path.HarvestTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /harvest/complete/{HarvestTaskId}` (see also `getOneCompletedHarvestTask`). Returns a specific stored completed Harvest Task or a specific stored completed Harvest with Harvest Measurements.
    GetOneCompletedHarvestTaskByIdFromResponse:
      operationId: getOneCompletedHarvestTask
      parameters:
        HarvestTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /harvest/complete/{HarvestTaskId}` (see also `getOneCompletedHarvestTask`). Returns a specific stored completed Harvest Task or a specific stored completed Harvest with Harvest Measurements.
    DeleteOneCompletedHarvestTaskById:
      operationId: deleteOneCompletedHarvestTask
      parameters:
        HarvestTaskId: $request.path.HarvestTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /harvest/complete/{HarvestTaskId}` (see also `deleteOneCompletedHarvestTask`). Deletes a specific stored completed Harvest Task or a specific stored completed Harvest with Harvest Measurements.
    DeleteOneCompletedHarvestTaskByIdFromResponse:
      operationId: deleteOneCompletedHarvestTask
      parameters:
        HarvestTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /harvest/complete/{HarvestTaskId}` (see also `deleteOneCompletedHarvestTask`). Deletes a specific stored completed Harvest Task or a specific stored completed Harvest with Harvest Measurements.
    GetAllScheduledSprayTasksRedirected:
      operationId: getAllScheduledSprayTasks
      description: |
        `GET /spray/task` (see also `getAllScheduledSprayTasks`). Returns a list of (all) stored scheduled Spray Tasks.
    GetOneScheduledSprayTaskById:
      operationId: getOneScheduledSprayTask
      parameters:
        SprayTaskId: $request.path.SprayTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /spray/task/{SprayTaskId}` (see also `getOneScheduledSprayTask`). Returns a specific stored scheduled Spray Task.
    GetOneScheduledSprayTaskByIdFromResponse:
      operationId: getOneScheduledSprayTask
      parameters:
        SprayTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /spray/task/{SprayTaskId}` (see also `getOneScheduledSprayTask`). Returns a specific stored scheduled Spray Task.
    DeleteOneScheduledSprayTaskById:
      operationId: deleteOneScheduledSprayTask
      parameters:
        SprayTaskId: $request.path.SprayTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /spray/task/{SprayTaskId}` (see also `deleteOneScheduledSprayTask`). Deletes a specific stored scheduled Spray Task.
    DeleteOneScheduledSprayTaskByIdFromResponse:
      operationId: deleteOneScheduledSprayTask
      parameters:
        SprayTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /spray/task/{SprayTaskId}` (see also `deleteOneScheduledSprayTask`). Deletes a specific stored scheduled Spray Task.
    GetAllCompletedSprayTasksRedirected:
      operationId: getAllCompletedSprayTasks
      description: |
        `GET /spray/complete` (see also `getAllCompletedSprayTasks`). Returns a list of (all) stored completed Spray Tasks and Sprays with Measurements.
    GetOneCompletedSprayTaskById:
      operationId: getOneCompletedSprayTask
      parameters:
        SprayTaskId: $request.path.SprayTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `GET /spray/complete/{SprayTaskId}` (see also `getOneCompletedSprayTask`). Returns a specific stored completed Spray Task or a specific stored completed Spray with Measurements.
    GetOneCompletedSprayTaskByIdFromResponse:
      operationId: getOneCompletedSprayTask
      parameters:
        SprayTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `GET /spray/complete/{SprayTaskId}` (see also `getOneCompletedSprayTask`). Returns a specific stored completed Spray Task or a specific stored completed Spray with Spray Measurements.
    DeleteOneCompletedSprayTaskById:
      operationId: deleteOneCompletedSprayTask
      parameters:
        SprayTaskId: $request.path.SprayTaskId
      description: |
        The `id` value given in the request can be used as the `id` parameter in `DELETE /spray/complete/{SprayTaskId}` (see also `deleteOneCompletedSprayTask`). Deletes a specific stored completed Spray Task or a specific stored completed Spray with Spray Measurements.
    DeleteOneCompletedSprayTaskByIdFromResponse:
      operationId: deleteOneCompletedSprayTask
      parameters:
        SprayTaskId: $response.body#/id
      description: |
        The `id` value returned in the response can be used as the `id` parameter in `DELETE /spray/complete/{SprayTaskId}` (see also `deleteOneCompletedSprayTask`). Deletes a specific stored completed Spray Task or a specific stored completed Spray with Spray Measurements.
security:
  - ApiKeyAuth: []
tags:
  - name: Get
    description: All operations to GET data
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.3'
  - name: GetOne
    description: All operations to GET a single date
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.3'
  - name: GetAll
    description: All operations to GET all data
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.3'
  - name: Delete
    description: All operations to DELETE data
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.7'
  - name: DeleteOne
    description: All operations to DELETE a single date
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.7'
  - name: DeleteAll
    description: All operations to DELETE all data
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.7'
  - name: Add
    description: All operations to ADD / POST data
    externalDocs:
      description: RFC2616 - Hypertext Transfer Protocol -- HTTP/1.1
      url: 'https://tools.ietf.org/html/rfc2616#section-9.5'
  - name: Change
    description: All operations to CHANGE / PATCH data
    externalDocs:
      description: RFC2616 - PATCH Method for HTTP
      url: 'https://tools.ietf.org/html/rfc5789#section-2'
  - name: Modify
    description: 'All operations to MODIFY existing data (DELETE, PATCH)'
  - name: Field
    description: All operations to work with Fields
  - name: Token
    description: All operations to work with tokens
  - name: User
    description: All operations to work with Users
  - name: Planter
    description: All operations to work with Planter Runs
  - name: Plant
    description: All operations to work with Plants
  - name: QualityMeasurement
    description: All operations to work with Quality Measurements
  - name: Forecast
    description: All operations to work with Forecasts
  - name: Terrain
    description: All operations to work with Terrains
  - name: Harvest
    description: All operations to work with Harvests
  - name: Harvest Task
    description: All operations to work with Harvest Tasks
  - name: Scheduled Harvest Task
    description: All operations to work with scheduled Harvest Tasks
  - name: Completed Harvest Task
    description: All operations to work with completed Harvest Tasks
  - name: Spray
    description: All operations to work with Sprays
  - name: Spray Task
    description: All operations to work with Spray Tasks
  - name: Scheduled Spray Task
    description: All operations to work with scheduled Spray Tasks
  - name: Completed Spray Task
    description: All operations to work with completed Spray Tasks
paths:
  /token:
    get:
      summary: Returns a list of all existing tokens
      description: |
        Returns a list of (all) existing tokens. With the optional parameter `TokenStrContains`, only the tokens with names containing all specified keywords (case insensitive) will be returned. If the operation was successful (status code `200`), an array with tokens will be returned.
      operationId: getAllTokens
      tags:
        - Token
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/TokenstrContains'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Creates a new token
      description: |
        Creates a new token with no access rights. If the operation was successful (status code `201`), the ID of the created token will be returned.
      operationId: postToken
      tags:
        - Token
        - Add
      requestBody:
        required: true
        description: The token to create
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Token'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
  '/token/{UserId}':
    get:
      summary: Returns all tokens of the user
      description: |
        Returns a list of (all) existing tokens of the user. With the optional parameter `TokenStrContains`, only the tokens with names containing all specified keywords (case insensitive) will be returned. If the operation was successful (status code `200`), an array with tokens will be returned.
      operationId: getUserTokens
      tags:
        - Token
        - User
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/TokenstrContains'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Creates a new token of the given `tokenstr`
      description: |
        Creates a new token with no access rights. If the operation was successful (status code `201`), the ID of the created token will be returned.
      operationId: postUserToken
      tags:
        - Token
        - User
        - Add
      parameters:
        - $ref: '#/components/parameters/UserId'
      requestBody:
        required: true
        description: The token string
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserToken'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TokenId'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Deletes the user and all its tokens
      description: |
        Deletes the user and all its tokens If the operation was successful (status code `200`), all deleted tokens will be returned.
      operationId: deleteOneUser
      tags:
        - Token
        - User
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/UserId'
      responses:
        '200':
          description: Successfully deleted user
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  '/token/{UserId}/{Tokenstr}':
    delete:
      summary: Deletes a specific token
      description: |
        Deletes a specific token of the given token string and user ID.
      operationId: deleteOneToken
      tags:
        - Token
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tokenstr'
      responses:
        '200':
          description: Successfully deleted Token
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  '/token/{UserId}/{Tokenstr}/access_right':
    get:
      summary: Returns a list of access rights for a specific token
      description: |
        Returns a list of access rights for a specific token. If the operation was successful (status code `200`), an array with access rights will be returned.
      operationId: getAccessRights
      tags:
        - Token
        - AccessRight
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tokenstr'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/AccessRight'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Creates a new access right for a specific token
      description: |
        Creates a new access right for a specific token. If an access right with the same path already exists, it will be replaced by the new one.  If the operation was successful (status code `201`), all access rights of this token will be returned.
      operationId: postAccessRight
      tags:
        - Token
        - AccessRight
        - Add
        - Modify
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tokenstr'
      requestBody:
        description: The access right to create
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AccessRight'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRight'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  '/token/{UserId}/{Tokenstr}/access_right/{AccessRightPath}':
    get:
      summary: Returns information about a specific access right for a specific token
      description: |
        Returns information about a specific access right for a specific token. If the operation was successful (status code `200`), the access right will be returned.
      operationId: getOneAccessRight
      tags:
        - Token
        - AccessRight
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tokenstr'
        - $ref: '#/components/parameters/AccessRightPath'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AccessRight'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Deletes a specific access right for a specific token
      description: |
        Deletes a specific access right for a specific token.
      operationId: deleteOneAccessRight
      tags:
        - Token
        - AccessRight
        - Delete
        - DeleteOne
      parameters:
        - $ref: '#/components/parameters/UserId'
        - $ref: '#/components/parameters/Tokenstr'
        - $ref: '#/components/parameters/AccessRightPath'
      responses:
        '200':
          description: Successfully deleted access right
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTokensRedirected:
              $ref: '#/components/links/GetAllTokensRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  /forecast:
    get:
      summary: Returns a list of (all) stored Forecasts
      description: |
        Returns a list of (all) stored Forecasts. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Forecasts will be returned.
      operationId: getAllForecasts
      tags:
        - Forecast
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Forecast'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Forecast to the collection
      description: |
        Adds a new Forecast to the collection. In the request body you have to add the new Forecast, which to be added. If the operation was successful (status code `200`), the numeric ID of the new Forecast will be returned.
      operationId: postForecast
      tags:
        - Forecast
        - Add
      requestBody:
        required: true
        description: A Forecast to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Forecast'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Forecast.
          links:
            GetAllForecastsRedirected:
              $ref: '#/components/links/GetAllForecastsRedirected'
            GetOneForecastByIdFromResponse:
              $ref: '#/components/links/GetOneForecastByIdFromResponse'
            DeleteOneForecastByIdFromResponse:
              $ref: '#/components/links/DeleteOneForecastByIdFromResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete collection of Forecast data. You can delete one specific Forecast with `DELETE /forecast/{ForecastID}` (`deleteOneForecast`).
      operationId: deleteForecast
      tags:
        - Forecast
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/forecast/{ForecastId}':
    get:
      summary: Returns a specific stored Forecast from the collection
      description: |
        Returns a specific stored Forecast from the collection. The parameter `ForecastId` is required, to get the specific stored Forecast. If the operation was successful (status code `200`), the specific Forecast will be returned.
      operationId: getOneForecast
      tags:
        - Forecast
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/ForecastId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Forecast'
          links:
            GetAllForecastsRedirected:
              $ref: '#/components/links/GetAllForecastsRedirected'
            DeleteOneForecastById:
              $ref: '#/components/links/DeleteOneForecastById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllForecastsRedirected:
              $ref: '#/components/links/GetAllForecastsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Forecast from the collection
      description: |
        Removes a specific stored Forecast from the collection. The parameter `ForecastId` is required, to delete the specific stored Forecast.
      operationId: deleteOneForecast
      tags:
        - Forecast
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/ForecastId'
      responses:
        '200':
          description: Successfully deleted Forecast
          links:
            GetAllForecastsRedirected:
              $ref: '#/components/links/GetAllForecastsRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllForecastsRedirected:
              $ref: '#/components/links/GetAllForecastsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  /field:
    get:
      summary: Returns a list of (all) stored Fields
      description: |
        Returns a list of (all) stored Fields.
        With the optional parameter `Box2d` parameter, only the fields that intersect the given bounding box will be returned.
        With the optional parameter `FieldNameContains`, only the fields with names containing all specified keywords (case insensitive) will be returned.
        With the optional parameter `FruitNameContains`, only the fields with fruit names containing all specified keywords (case insensitive) will be returned.
        With the optional parameter `FuzzyFieldKeywords`, only the fields with at least one string attribute containing one of the specified keywords (case insensitive) will be returned.
        With the parameters `Limit` and `Offset` it can be specified, which data to return.
        The returned fields are ordered based on the number of string segments matched by the fuzzy keywords. Fields with case-sensitive matches receive a higher score. If two fields have identical scores, they are sorted by their field ID.
        If the operation was successful (status code `200`), an array with Fields will be returned.
      operationId: getAllFields
      tags:
        - Field
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/FuzzyFieldKeywords'
        - $ref: '#/components/parameters/FieldNameContains'
        - $ref: '#/components/parameters/FruitNameContains'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Field'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Field to the collection
      description: |
        Adds a new Field to the collection. In the request body you have to add the new Field, which to be added. If the operation was successful (status code `200`), the numeric ID of the new Field will be returned.
      operationId: postField
      tags:
        - Field
        - Add
      requestBody:
        required: true
        description: A Field to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Field'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Field.
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldByIdFromResponse:
              $ref: '#/components/links/GetOneFieldByIdFromResponse'
            DeleteOneFieldByIdFromResponse:
              $ref: '#/components/links/DeleteOneFieldByIdFromResponse'
            GetAllPlanterRunsByIdFromResponse:
              $ref: '#/components/links/GetAllPlanterRunsByIdFromResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete collection of Field data. You can delete one specific Field with `DELETE /field/{FieldId}` (`deleteOneField`).
      operationId: deleteField
      tags:
        - Field
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/field/{FieldId}':
    get:
      summary: Returns a specific stored Field from the collection
      description: |
        Returns a specific stored Field from the collection. The parameter `FieldId` is required, to get the specific stored Field. If the operation was successful (status code `200`), the specific Field will be returned.
      operationId: getOneField
      tags:
        - Field
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/FieldId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Field from the collection
      description: |
        Removes a specific stored Field from the collection. The parameter `FieldId` is required, to delete the specific stored Field.
      operationId: deleteOneField
      tags:
        - Field
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
      responses:
        '200':
          description: Successfully deleted Field
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    patch:
      summary: Patches a specific stored Field
      description: |
        Patches a specific stored Field. The parameter `FieldId` is required, to replace the specific stored Field by the new one. Also the new data (`FieldPatch`) is required. If the operation was successful (status code `200`), the new Field will be returned.
      operationId: patchOneField
      tags:
        - Field
        - Change
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
      requestBody:
        required: true
        description: The updated properties to patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FieldPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Field'
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  '/field/{FieldId}/planter':
    get:
      summary: Returns a list of (all) stored Planter Runs
      description: |
        Returns a list of (all) stored Planter Runs. The parameter `FieldId` is required, to get the specific stored Planter Runs. With the optional parameter `Box2d`, only the Planter Runs that intersect the given bounding box will be returned. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Planter Runs will be returned.
      operationId: getAllPlanterRuns
      tags:
        - Planter
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PlanterRun'
          links:
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Planter Run to the collection
      description: |
        Adds a new Planter Run to the collection. In the request body you have to add the new Planter Run, which to be added. The parameter `FieldId` is required, to add a Planter Run. If the operation was successful (status code `200`), the numeric ID of the new Planter Run will be returned.
      operationId: postPlanterRun
      tags:
        - Planter
        - Add
      parameters:
        - $ref: '#/components/parameters/FieldId'
      requestBody:
        required: true
        description: A Planter Run to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlanterRun'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Planter Run.
          links:
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunByIdFromResponse:
              $ref: '#/components/links/GetOnePlanterRunByIdFromResponse'
            DeleteOnePlanterRunByIdFromResponse:
              $ref: '#/components/links/DeleteOnePlanterRunByIdFromResponse'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllPlantsByIdFromResponse:
              $ref: '#/components/links/GetAllPlantsByIdFromResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete collection of Planter Run data. You can delete one specific Planter Run with `DELETE /field/{FieldId}/planter/{PlanterRunId}` (`deleteOnePlanterRun`).
      operationId: deletePlanterRun
      tags:
        - Planter
        - Delete
        - DeleteAll
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/field/{FieldId}/planter/{PlanterRunId}':
    get:
      summary: Returns a specific stored Planter Run from the collection
      description: |
        Returns a specific stored Planter Run from the collection. The parameters `FieldId` and `PlanterRunId` are required, to get the specific stored Planter Run. If the operation was successful (status code `200`), the specific Planter Run will be returned.
      operationId: getOnePlanterRun
      tags:
        - Planter
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PlanterRun'
          links:
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Planter Run from the collection
      description: |
        Removes a specific stored Planter Run from the collection. The parameters `FieldId` and `PlanterRunId` are required, to delete the specific stored Planter Run.
      operationId: deleteOnePlanterRun
      tags:
        - Planter
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
      responses:
        '200':
          description: Successfully deleted Planter Run
          links:
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
  '/field/{FieldId}/planter/{PlanterRunId}/plant':
    get:
      summary: Returns a list of (all) stored Plants
      description: |
        Returns a list of (all) stored Plants. The parameters `FieldId` and `PlanterRunId` are required, to get the specific stored Plants. With the optional parameter `Box2d`, only the Plants that intersect the given bounding box will be returned. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Plants will be returned.
      operationId: getAllPlants
      tags:
        - Plant
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/Box2d'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Plant'
          links:
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Plant to the collection
      description: |
        Adds a new Plant to the collection. In the request body you have to add the new Plant, which to be added. The parameters `FieldId` and `PlanterRunId` are required, to add a Plant. If the operation was successful (status code `200`), the numeric ID of the new Plant will be returned.
      operationId: postPlant
      tags:
        - Plant
        - Add
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
      requestBody:
        required: true
        description: A plant to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Plant'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Plant.
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantByIdFromResponse:
              $ref: '#/components/links/GetOnePlantByIdFromResponse'
            DeleteOnePlantByIdFromResponse:
              $ref: '#/components/links/DeleteOnePlantByIdFromResponse'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllQualityMeasurementsByIdFromResponse:
              $ref: '#/components/links/GetAllQualityMeasurementsByIdFromResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete collection of Plants data. The parameters `FieldId` and `PlanterRunId` are required. You can delete one specific Plant with `DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}` (`deleteOnePlant`).
      operationId: deletePlant
      tags:
        - Plant
        - Delete
        - DeleteAll
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}':
    get:
      summary: Returns a specific stored Plant from the collection
      description: |
        Returns a specific stored Plant from the collection. The parameters `FieldId`, `PlanterRunId` and `PlantId` are required, to get the specific stored Plant. If the operation was successful (status code `200`), the specific Plant will be returned.
      operationId: getOnePlant
      tags:
        - Plant
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Plant from the collection
      description: |
        Removes a specific stored Plant from the collection. The parameters `FieldId`, `PlanterRunId` and `PlantId` are required, to delete the specific stored Plant.
      operationId: deleteOnePlant
      tags:
        - Plant
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
      responses:
        '200':
          description: Successfully deleted Plant
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
    patch:
      summary: Patches a specific stored Plant
      description: |
        Patches a specific stored Plant. The parameters `FieldId`, `PlanterRunId` and `PlantId` are required, to replace the specific stored Plant by the new one. Also the new data (`PlantPatch`) is required. If the operation was successful (status code `200`), the new Plant will be returned.
      operationId: patchOnePlant
      tags:
        - Plant
        - Change
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
      requestBody:
        required: true
        description: The updated properties to patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PlantPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Plant'
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
  '/field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement':
    get:
      summary: Returns a list of (all) stored Quality Measurements
      description: |
        Returns a list of (all) stored Quality Measurements. The parameters `FieldId`, `PlanterRunId` and `PlantId` are required, to get the specific stored Quality Measurements. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Quality Measurements will be returned.
      operationId: getAllQualityMeasurements
      tags:
        - QualityMeasurement
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/QualityMeasurement'
          links:
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Quality Measurement to the collection
      description: |
        Adds a new Quality Measurement to the collection. In the request body you have to add the new Quality Measurement, which to be added. The parameters `FieldId`, `PlanterRunId` and `PlantId` are required, to add a Quality Measurement. If the operation was successful (status code `200`), the numeric ID of the new Quality Measurement will be returned.
      operationId: postQualityMeasurement
      tags:
        - QualityMeasurement
        - Add
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
      requestBody:
        required: true
        description: A Quality Measurement to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/QualityMeasurement'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Quality Measurement.
          links:
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
            GetOneQualityMeasurementByIdFromResponse:
              $ref: '#/components/links/GetOneQualityMeasurementByIdFromResponse'
            DeleteOneQualityMeasurementByIdFromResponse:
              $ref: '#/components/links/DeleteOneQualityMeasurementByIdFromResponse'
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete collection of Quality Measurement data. You can delete one specific Quality Measurement with `DELETE /field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}` (`deleteOneQualityMeasurement`).
      operationId: deleteQualityMeasurement
      tags:
        - QualityMeasurement
        - Delete
        - DeleteAll
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/field/{FieldId}/planter/{PlanterRunId}/plant/{PlantId}/quality_measurement/{QualityMeasurementId}':
    get:
      summary: Returns a specific stored Quality Measurement from the collection
      description: |
        Returns a specific stored Quality Measurement from the collection. The parameters `FieldId`, `PlanterRunId`, `PlantId` and `QualityMeasurementId` are required, to get the specific stored Quality Measurement. If the operation was successful (status code `200`), the specific Quality Measurement will be returned.
      operationId: getOneQualityMeasurement
      tags:
        - QualityMeasurement
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
        - $ref: '#/components/parameters/QualityMeasurementId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/QualityMeasurement'
          links:
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
            DeleteOneQualityMeasurementById:
              $ref: '#/components/links/DeleteOneQualityMeasurementById'
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Quality Measurement from the collection
      description: |
        Removes a specific stored Quality Measurement from the collection. The parameters `FieldId`, `PlanterRunId`, `PlantId` and `QualityMeasurementId` are required, to delete the specific stored Quality Measurement.
      operationId: deleteOneQualityMeasurement
      tags:
        - QualityMeasurement
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/FieldId'
        - $ref: '#/components/parameters/PlanterRunId'
        - $ref: '#/components/parameters/PlantId'
        - $ref: '#/components/parameters/QualityMeasurementId'
      responses:
        '200':
          description: Successfully deleted Quality Measurement
          links:
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllQualityMeasurementsById:
              $ref: '#/components/links/GetAllQualityMeasurementsById'
            GetAllPlantsById:
              $ref: '#/components/links/GetAllPlantsById'
            GetOnePlantById:
              $ref: '#/components/links/GetOnePlantById'
            DeleteOnePlantById:
              $ref: '#/components/links/DeleteOnePlantById'
            GetAllPlanterRunsById:
              $ref: '#/components/links/GetAllPlanterRunsById'
            GetOnePlanterRunById:
              $ref: '#/components/links/GetOnePlanterRunById'
            DeleteOnePlanterRunById:
              $ref: '#/components/links/DeleteOnePlanterRunById'
            GetAllFieldsRedirected:
              $ref: '#/components/links/GetAllFieldsRedirected'
            GetOneFieldById:
              $ref: '#/components/links/GetOneFieldById'
            DeleteOneFieldById:
              $ref: '#/components/links/DeleteOneFieldById'
        '500':
          $ref: '#/components/responses/BackendError'
  /terrain:
    get:
      summary: Returns a list of (all) stored Terrain Models
      description: |
        Returns a list of (all) stored Terrain Models. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Terrain Models will be returned.
      operationId: getAllTerrains
      tags:
        - Terrain
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Terrain'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete collection of Terrain Model data. You can delete one specific Terrain Model with `DELETE /terrain/{TerrainId}` (`deleteOneTerrain`).
      operationId: deleteTerrain
      tags:
        - Terrain
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/terrain/{TerrainId}':
    get:
      summary: Returns a specific stored Terrain Model from the collection
      description: |
        Returns a specific stored Terrain Model from the collection. The parameter `TerrainId` is required, to get the specific stored Terrain Model. If the operation was successful (status code `200`), the specific Terrain Model will be returned.
      operationId: getOneTerrain
      tags:
        - Terrain
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/TerrainId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Terrain'
          links:
            GetAllTerrainsRedirected:
              $ref: '#/components/links/GetAllTerrainsRedirected'
            DeleteOneTerrainById:
              $ref: '#/components/links/DeleteOneTerrainById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTerrainsRedirected:
              $ref: '#/components/links/GetAllTerrainsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Terrain Model from the collection
      description: |
        Removes a specific stored Terrain Model from the collection. The parameter `TerrainId` is required, to delete the specific stored Terrain Model.
      operationId: deleteOneTerrain
      tags:
        - Terrain
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/TerrainId'
      responses:
        '200':
          description: Successfully deleted Terrain Model
          links:
            GetAllTerrainsRedirected:
              $ref: '#/components/links/GetAllTerrainsRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllTerrainsRedirected:
              $ref: '#/components/links/GetAllTerrainsRedirected'
        '500':
          $ref: '#/components/responses/BackendError'
  /harvest/task:
    get:
      summary: Returns a list of (all) stored scheduled Harvest Tasks
      description: |
        Returns a list of (all) stored scheduled Harvest Tasks. With the optional parameter `Box2d`, only the Harvest Tasks that intersect the given bounding box will be returned. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Harvest Tasks will be returned.
      operationId: getAllScheduledHarvestTasks
      tags:
        - Harvest
        - Harvest Task
        - Scheduled Harvest Task
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HarvestTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Harvest Task to the scheduled collection
      description: |
        Adds a new Harvest Task to the scheduled collection. In the request body you have to add the new Harvest Task, which to be added. If the operation was successful (status code `200`), the numeric ID of the new Harvest Task will be returned.
      operationId: postScheduledHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Scheduled Harvest Task
        - Add
      requestBody:
        required: true
        description: A Harvest Task to be added to the scheduled collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HarvestTask'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Harvest Task.
          links:
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetOneScheduledHarvestTaskByIdFromResponse:
              $ref: '#/components/links/GetOneScheduledHarvestTaskByIdFromResponse'
            DeleteOneScheduledHarvestTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneScheduledHarvestTaskByIdFromResponse'
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetOneCompletedHarvestTaskByIdFromResponse:
              $ref: '#/components/links/GetOneCompletedHarvestTaskByIdFromResponse'
            DeleteOneCompletedHarvestTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneCompletedHarvestTaskByIdFromResponse'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete scheduled collection of Harvest Tasks. You can delete one specific scheduled Harvest Task with `DELETE /harvest/task/{HarvestTaskId}` (`deleteOneScheduledHarvestTask`). Or you can delete one specific completed Harvest Task with `DELETE /harvest/complete/{HarvestTaskId}` (`deleteOneCompletedHarvestTask`).
      operationId: deleteScheduledHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Scheduled Harvest Task
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/harvest/task/{HarvestTaskId}':
    get:
      summary: Returns a specific stored Harvest Task from the scheduled collection
      description: |
        Returns a specific stored Harvest Task from the scheduled collection. The parameter `HarvestTaskId` is required, to get the specific stored Harvest Task. If the operation was successful (status code `200`), the specific Harvest Task will be returned.
      operationId: getOneScheduledHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Scheduled Harvest Task
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/HarvestTaskId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HarvestTask'
          links:
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            DeleteOneScheduledHarvestTaskById:
              $ref: '#/components/links/DeleteOneScheduledHarvestTaskById'
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetOneCompletedHarvestTaskById:
              $ref: '#/components/links/GetOneCompletedHarvestTaskById'
            DeleteOneCompletedHarvestTaskById:
              $ref: '#/components/links/DeleteOneCompletedHarvestTaskById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetOneCompletedHarvestTaskById:
              $ref: '#/components/links/GetOneCompletedHarvestTaskById'
            DeleteOneCompletedHarvestTaskById:
              $ref: '#/components/links/DeleteOneCompletedHarvestTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Harvest Task from the scheduled collection
      description: |
        Removes a specific stored Harvest Task from the scheduled collection. The parameter `HarvestTaskId` is required, to delete the specific stored Harvest Task.
      operationId: deleteOneScheduledHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Scheduled Harvest Task
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/HarvestTaskId'
      responses:
        '200':
          description: Successfully deleted scheduled Harvest Task
          links:
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetOneCompletedHarvestTaskById:
              $ref: '#/components/links/GetOneCompletedHarvestTaskById'
            DeleteOneCompletedHarvestTaskById:
              $ref: '#/components/links/DeleteOneCompletedHarvestTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
  /harvest/complete:
    get:
      summary: Returns a list of (all) stored completed Harvest Tasks and Harvests with Harvest Measurements
      description: |
        Returns a list of (all) stored completed Harvest Tasks and Harvests with Harvest Measurements. With the optional parameter `Box2d`, only the completed Harvest Tasks that intersect the given bounding box will be returned. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Harvests will be returned.
      operationId: getAllCompletedHarvestTasks
      tags:
        - Harvest
        - Harvest Task
        - Completed Harvest Task
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HarvestOrTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds either a new Harvest Task or a new Harvest with Harvest Measurements to the completed collection
      description: |
        Adds either a new Harvest Task or a new Harvest with Harvest Measurements to the completed collection. In the request body you have to add either the new Harvest Task or the new Harvest with Harvest Measurements, which to be added. If the operation was successful (status code `200`), the numeric ID of the new Harvest will be returned. Note: All Harvests with the same ID - as the ID specified here in the request body - are removed from the list of scheduled Harvest Tasks!
      operationId: postCompletedHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Completed Harvest Task
        - Add
      requestBody:
        required: true
        description: Either a Harvest Task or a Harvest with Harvest Measurements to be added to the completed collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/HarvestOrTask'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Harvest Task.
          links:
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetOneCompletedHarvestTaskByIdFromResponse:
              $ref: '#/components/links/GetOneCompletedHarvestTaskByIdFromResponse'
            DeleteOneCompletedHarvestTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneCompletedHarvestTaskByIdFromResponse'
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetOneScheduledHarvestTaskByIdFromResponse:
              $ref: '#/components/links/GetOneScheduledHarvestTaskByIdFromResponse'
            DeleteOneScheduledHarvestTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneScheduledHarvestTaskByIdFromResponse'
        '303':
          $ref: '#/components/responses/SeeOther'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete completed collection of Harvest Tasks and Harvests with Harvest Measurements. You can delete one specific completed Harvest Task with `DELETE /harvest/complete/{HarvestTaskId}` (`deleteOneCompletedHarvestTask`). Or you can delete one specific scheduled Harvest Task with `DELETE /harvest/task/{HarvestTaskId}` (`deleteOneScheduledHarvestTask`).
      operationId: deleteCompletedHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Completed Harvest Task
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/harvest/complete/{HarvestTaskId}':
    get:
      summary: Returns either a specific stored Harvest Task or a specific stored Harvest with Harvest Measurements from the completed collection
      description: |
        Returns either a specific stored Harvest Task or a specific stored Harvest with Harvest Measurements from the completed collection. The parameter `HarvestTaskId` is required, to get the specific stored Harvest. If the operation was successful (status code `200`), the specific Harvest will be returned.
      operationId: getOneCompletedHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Completed Harvest Task
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/HarvestTaskId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/HarvestOrTask'
          links:
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            DeleteOneCompletedHarvestTaskById:
              $ref: '#/components/links/DeleteOneCompletedHarvestTaskById'
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetOneScheduledHarvestTaskById:
              $ref: '#/components/links/GetOneScheduledHarvestTaskById'
            DeleteOneScheduledHarvestTaskById:
              $ref: '#/components/links/DeleteOneScheduledHarvestTaskById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetOneScheduledHarvestTaskById:
              $ref: '#/components/links/GetOneScheduledHarvestTaskById'
            DeleteOneScheduledHarvestTaskById:
              $ref: '#/components/links/DeleteOneScheduledHarvestTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes either a specific stored Harvest Task or a specific stored Harvest with Harvest Measurements from the completed collection
      description: |
        Removes either a specific stored Harvest Task or a specific stored Harvest with Harvest Measurements from the completed collection. The parameter `HarvestTaskId` is required, to delete the specific stored Harvest.
      operationId: deleteOneCompletedHarvestTask
      tags:
        - Harvest
        - Harvest Task
        - Completed Harvest Task
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/HarvestTaskId'
      responses:
        '200':
          description: Successfully deleted completed Harvest
          links:
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllCompletedHarvestTasksRedirected:
              $ref: '#/components/links/GetAllCompletedHarvestTasksRedirected'
            GetAllScheduledHarvestTasksRedirected:
              $ref: '#/components/links/GetAllScheduledHarvestTasksRedirected'
            GetOneScheduledHarvestTaskById:
              $ref: '#/components/links/GetOneScheduledHarvestTaskById'
            DeleteOneScheduledHarvestTaskById:
              $ref: '#/components/links/DeleteOneScheduledHarvestTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
  /spray/task:
    get:
      summary: Returns a list of (all) stored scheduled Spray Tasks
      description: |
        Returns a list of (all) stored scheduled Spray Tasks. With the optional parameter `Box2d`, only the Spray Tasks that intersect the given bounding box will be returned. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Spray Tasks will be returned.
      operationId: getAllScheduledSprayTasks
      tags:
        - Spray
        - Spray Task
        - Scheduled Spray Task
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SprayTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Spray Task to the scheduled collection
      description: |
        Adds a new Spray Task to the scheduled collection. In the request body you have to add the new Spray Task, which to be added. If the operation was successful (status code `200`), the numeric ID of the new Spray Task will be returned.
      operationId: postScheduledSprayTask
      tags:
        - Spray
        - Spray Task
        - Scheduled Spray Task
        - Add
      requestBody:
        required: true
        description: A Spray Task to be added to the scheduled collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SprayTask'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Spray Task.
          links:
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetOneScheduledSprayTaskByIdFromResponse:
              $ref: '#/components/links/GetOneScheduledSprayTaskByIdFromResponse'
            DeleteOneScheduledSprayTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneScheduledSprayTaskByIdFromResponse'
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetOneCompletedSprayTaskByIdFromResponse:
              $ref: '#/components/links/GetOneCompletedSprayTaskByIdFromResponse'
            DeleteOneCompletedSprayTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneCompletedSprayTaskByIdFromResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete scheduled collection of Spray Tasks. You can delete one specific scheduled Spray Task with `DELETE /spray/task/{SprayTaskId}` (`deleteOneScheduledSprayTask`). Or you can delete one specific completed Spray Task with `DELETE /spray/complete/{SprayTaskId}` (`deleteOneCompletedSprayTask`).
      operationId: deleteScheduledSprayTask
      tags:
        - Spray
        - Spray Task
        - Scheduled Spray Task
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/spray/task/{SprayTaskId}':
    get:
      summary: Returns a specific stored Spray Task from the scheduled collection
      description: |
        Returns a specific stored Spray Task from the scheduled collection. The parameter `SprayTaskId` is required, to get the specific stored Spray Task. If the operation was successful (status code `200`), the specific Spray Task will be returned.
      operationId: getOneScheduledSprayTask
      tags:
        - Spray
        - Spray Task
        - Scheduled Spray Task
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/SprayTaskId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SprayTask'
          links:
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            DeleteOneScheduledSprayTaskById:
              $ref: '#/components/links/DeleteOneScheduledSprayTaskById'
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetOneCompletedSprayTaskById:
              $ref: '#/components/links/GetOneCompletedSprayTaskById'
            DeleteOneCompletedSprayTaskById:
              $ref: '#/components/links/DeleteOneCompletedSprayTaskById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetOneCompletedSprayTaskById:
              $ref: '#/components/links/GetOneCompletedSprayTaskById'
            DeleteOneCompletedSprayTaskById:
              $ref: '#/components/links/DeleteOneCompletedSprayTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific stored Spray Task from the scheduled collection
      description: |
        Removes a specific stored Spray Task from the scheduled collection. The parameter `SprayTaskId` is required, to delete the specific stored Spray Task.
      operationId: deleteOneScheduledSprayTask
      tags:
        - Spray
        - Spray Task
        - Scheduled Spray Task
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/SprayTaskId'
      responses:
        '200':
          description: Successfully deleted scheduled Spray Task
          links:
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetOneCompletedSprayTaskById:
              $ref: '#/components/links/GetOneCompletedSprayTaskById'
            DeleteOneCompletedSprayTaskById:
              $ref: '#/components/links/DeleteOneCompletedSprayTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
  /spray/complete:
    get:
      summary: Returns a list of (all) stored completed Spray Tasks and Sprays with Spray Measurements
      description: |
        Returns a list of (all) stored completed Spray Tasks and Sprays with Spray Measurements. With the optional parameter `Box2d`, only the completed Spray Tasks that intersect the given bounding box will be returned. With the parameters `Limit` and `Offset` it can be specified, which data to return. If the operation was successful (status code `200`), an array with Sprays will be returned.
      operationId: getAllCompletedSprayTasks
      tags:
        - Spray
        - Spray Task
        - Completed Spray Task
        - Get
        - GetAll
      parameters:
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SprayTask'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds either a new Spray Task or a new Spray with Spray Measurements to the completed collection
      description: |
        Adds either a new Spray Task or a new Spray with Spray Measurements to the completed collection. In the request body you have to add either the new Spray Task or the new Spray with Spray Measurements, which to be added. If the operation was successful (status code `200`), the numeric ID of the new Spray will be returned. Note: All Sprays with the same ID - as the ID specified here in the request body - are removed from the list of scheduled Spray Tasks!
      operationId: postCompletedSprayTask
      tags:
        - Spray
        - Spray Task
        - Completed Spray Task
        - Add
      requestBody:
        required: true
        description: Either a Spray Task or a Spray with Spray Measurements to be added to the completed collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SprayTask'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int64
                    description: Numeric ID of the created Spray Task.
          links:
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetOneCompletedSprayTaskByIdFromResponse:
              $ref: '#/components/links/GetOneCompletedSprayTaskByIdFromResponse'
            DeleteOneCompletedSprayTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneCompletedSprayTaskByIdFromResponse'
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetOneScheduledSprayTaskByIdFromResponse:
              $ref: '#/components/links/GetOneScheduledSprayTaskByIdFromResponse'
            DeleteOneScheduledSprayTaskByIdFromResponse:
              $ref: '#/components/links/DeleteOneScheduledSprayTaskByIdFromResponse'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Can't delete complete collection
      description: |
        You can't delete the complete completed collection of Spray Tasks and Sprays with Spray Measurements. You can delete one specific completed Spray Task with `DELETE /spray/complete/{SprayTaskId}` (`deleteOneCompletedSprayTask`). Or you can delete one specific scheduled Spray Task with `DELETE /spray/task/{SprayTaskId}` (`deleteOneScheduledSprayTask`).
      operationId: deleteCompletedSprayTask
      tags:
        - Spray
        - Spray Task
        - Completed Spray Task
        - Delete
        - DeleteAll
        - Modify
      responses:
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '405':
          $ref: '#/components/responses/MethodNotAllowed'
  '/spray/complete/{SprayTaskId}':
    get:
      summary: Returns either a specific stored Spray Task or a specific stored Spray with Spray Measurements from the completed collection
      description: |
        Returns either a specific stored Spray Task or a specific stored Spray with Spray Measurements from the completed collection. The parameter `SprayTaskId` is required, to get the specific stored Spray. If the operation was successful (status code `200`), the specific Spray will be returned.
      operationId: getOneCompletedSprayTask
      tags:
        - Spray
        - Spray Task
        - Completed Spray Task
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/SprayTaskId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SprayTask'
          links:
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            DeleteOneCompletedSprayTaskById:
              $ref: '#/components/links/DeleteOneCompletedSprayTaskById'
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetOneScheduledSprayTaskById:
              $ref: '#/components/links/GetOneScheduledSprayTaskById'
            DeleteOneScheduledSprayTaskById:
              $ref: '#/components/links/DeleteOneScheduledSprayTaskById'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetOneScheduledSprayTaskById:
              $ref: '#/components/links/GetOneScheduledSprayTaskById'
            DeleteOneScheduledSprayTaskById:
              $ref: '#/components/links/DeleteOneScheduledSprayTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes either a specific stored Spray Task or a specific stored Spray with Spray Measurements from the completed collection
      description: |
        Removes either a specific stored Spray Task or a specific stored Spray with Spray Measurements from the completed collection. The parameter `SprayTaskId` is required, to delete the specific stored Spray.
      operationId: deleteOneCompletedSprayTask
      tags:
        - Spray
        - Spray Task
        - Completed Spray Task
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/SprayTaskId'
      responses:
        '200':
          description: Successfully deleted completed Spray
          links:
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
          links:
            GetAllCompletedSprayTasksRedirected:
              $ref: '#/components/links/GetAllCompletedSprayTasksRedirected'
            GetAllScheduledSprayTasksRedirected:
              $ref: '#/components/links/GetAllScheduledSprayTasksRedirected'
            GetOneScheduledSprayTaskById:
              $ref: '#/components/links/GetOneScheduledSprayTaskById'
            DeleteOneScheduledSprayTaskById:
              $ref: '#/components/links/DeleteOneScheduledSprayTaskById'
        '500':
          $ref: '#/components/responses/BackendError'
  /vivc:
    get:
      summary: Returns a list of all stored cultivars
      description: |
        Returns a list of all stored cultivars.
        With the optional parameter `color`, only the cultivars with the specified berry skin color will be returned.
        With the optional parameter `country`, only the cultivars originating from the specified country or region will be returned.
        With the optional parameter `species`, only the cultivars belonging to the specified species will be returned.
        With the optional parameter `primeName`, only the cultivars with the specified prime name will be returned.
        With the optional parameter `cultivarName`, only the cultivars with the specified cultivar name will be returned.
        If the operation was successful (status code `200`), an array with cultivars will be returned.
      operationId: getAllCultivars
      tags:
        - Cultivar
        - Get
        - GetAll
      parameters:
        - name: color
          in: query
          required: false
          description: A set of keywords used to filter the results of cultivars. Only cultivars with a berry skin color containing all of the specified keywords (case insensitive) will be returned.
          schema:
            type: array
            items:
              type: string
        - name: region
          in: query
          required: false
          description: A set of keywords used to filter the results of cultivars. Only cultivars with a country or region containing all of the specified keywords (case insensitive) will be returned.
          schema:
            type: array
            items:
              type: string
        - name: species
          in: query
          required: false
          description: A set of keywords used to filter the results of cultivars. Only cultivars with a species containing all of the specified keywords (case insensitive) will be returned.
          schema:
            type: array
            items:
              type: string
        - name: primeName
          in: query
          required: false
          description: A set of keywords used to filter the results of cultivars. Only cultivars with prime names containing all specified keywords (case insensitive) will be returned.
          schema:
            type: array
            items:
              type: string
        - name: cultivarName
          in: query
          required: false
          description: A set of keywords used to filter the results of cultivars. only cultivars with names containing all specified keywords (case insensitive) will be returned.
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Cultivar'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Cultivar to the collection
      description: |
        Adds a new Cultivar to the collection. If the operation was successful (status code `200`), the numeric ID of the new Cultivar will be returned.
      operationId: postCultivar
      tags:
        - Cultivar
        - Add
      requestBody:
        required: true
        description: A Cultivar to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Cultivar'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    description: Numeric ID of the created Cultivar.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
  '/vivc/{CultivarId}':
    get:
      summary: Returns a specific cultivar from the collection by its ID
      description: |
        Returns a specific cultivar from the collection. The parameter `CultivarId` is required to get the specific cultivar. If the operation is successful (status code `200`), the specific cultivar will be returned.
      operationId: getOneCultivar
      tags:
        - Cultivar
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/CultivarId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cultivar'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific cultivar from the collection bi its ID
      description: |
        Removes a specific cultivar from the collection. The parameter `CultivarId` is required to delete the specific cultivar.
      operationId: deleteOneCultivar
      tags:
        - Cultivar
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/CultivarId'
      responses:
        '200':
          description: Successfully deleted cultivar
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
    patch:
      summary: Patches a specific cultivar
      description: |
        Patches a specific cultivar. The parameter `CultivarId` is required to replace the specific cultivar with the new one. Also, the new data (`CultivarPatch`) is required. If the operation is successful (status code `200`), the new cultivar will be returned.
      operationId: patchOneCultivar
      tags:
        - Cultivar
        - Change
        - Modify
      parameters:
        - $ref: '#/components/parameters/CultivarId'
      requestBody:
        required: true
        description: The updated properties to patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CultivarPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cultivar'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
  /weather/station:
    get:
      summary: Returns a list of all weather stations
      description: |
        Returns a list of all weather stations.
        With the optional parameter `bundesland`, only the weather stations located in the specified state will be returned.
        With the optional parameter `box2d`, only the weather stations that intersect the given bounding box will be returned.
        With the optional parameters `offset` and `limit`, you can control the pagination of the results.
        If the operation was successful (status code `200`), an array with weather stations will be returned.
      operationId: getAllWeatherStations
      tags:
        - Weather Station
        - Get
        - GetAll
      parameters:
        - name: bundesland
          in: query
          required: false
          description: A set of keywords used to filter the results of weather stations. Only weather stations located in the specified state containing all of the specified keywords (case insensitive) will be returned.
          schema:
            type: array
            items:
              type: string
        - $ref: '#/components/parameters/Box2d'
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherStation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds a new Weather Station to the collection
      description: |
        Adds a new Weather Station to the collection. If the operation was successful (status code `200`), the numeric ID of the new Weather Station will be returned.
      operationId: postWeatherStation
      tags:
        - Weather Station
        - Add
      requestBody:
        required: true
        description: A Weather Station to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherStation'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    description: Numeric ID of the created Weather Station.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
  '/weather/station/{WeatherStationId}':
    get:
      summary: Returns a specific weather station from the collection
      description: |
        Returns a specific weather station from the collection. The parameter `station_id` is required to get the specific weather station. If the operation was successful (status code `200`), the specific weather station will be returned.
      operationId: getOneWeatherStation
      tags:
        - Weather Station
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherStation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes a specific weather station from the collection
      description: |
        Removes a specific weather station from the collection. The parameter `station_id` is required to delete the specific weather station.
      operationId: deleteOneWeatherStation
      tags:
        - Weather Station
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
      responses:
        '200':
          description: Successfully deleted weather station
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
    patch:
      summary: Patches a specific weather station
      description: |
        Patches a specific weather station. The parameter `station_id` is required to replace the specific weather station with the new one. Also, the new data (`WeatherStationPatch`) is required. If the operation was successful (status code `200`), the new weather station will be returned.
      operationId: patchOneWeatherStation
      tags:
        - Weather Station
        - Change
        - Modify
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
      requestBody:
        required: true
        description: The updated properties to patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherStationPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherStation'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
  /weather/data:
    get:
      summary: Returns a list of weather data
      description: |
        Returns a list of weather data.
        With the optional parameter `stationIds`, only the weather data for the specified station ids will be returned.
        With the optional parameters `startDate` and `endDate`, only the weather data within the specified date range (inclusive) will be returned. If `endDate` is omitted, it defaults to today's date. If `startDate` is omitted, it includes all data up to `endDate`.
        If the operation was successful (status code `200`), an array with weather data will be returned.
      operationId: getAllWeatherData
      tags:
        - Weather Data
        - Get
        - GetAll
      parameters:
        - name: stationIds
          in: query
          required: false
          description: A set of station ids used to filter the results of weather data. Only weather data for the specified station ids will be returned.
          schema:
            type: array
            items:
              type: integer
        - name: startDate
          in: query
          required: false
          description: 'The start date of the date range used to filter the results of weather data. Only weather data within the specified date range (inclusive) will be returned. If omitted, it includes all data up to `endDate`.'
          schema:
            type: string
            format: date
        - name: endDate
          in: query
          required: false
          description: 'The end date of the date range used to filter the results of weather data. Only weather data within the specified date range (inclusive) will be returned. If omitted, it defaults to today''s date.'
          schema:
            type: string
            format: date
        - $ref: '#/components/parameters/Offset'
        - $ref: '#/components/parameters/Limit'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WeatherData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
  '/weather/data/{WeatherStationId}/{MeasurementDate}':
    get:
      summary: Returns weather data for a specific station and date
      description: |
        Returns weather data for a specific weather station and date. The parameters `WeatherStationId` and `MeasurementDate` are required to get the specific weather data. If the operation was successful (status code `200`), the weather data will be returned.
      operationId: getWeatherData
      tags:
        - Weather Data
        - Get
        - GetOne
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
        - $ref: '#/components/parameters/MeasurementDate'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
    delete:
      summary: Removes weather data for a specific station and date
      description: |
        Removes weather data for a specific weather station and date. The parameters `WeatherStationId` and `MeasurementDate` are required to delete the specific weather data.
      operationId: deleteWeatherData
      tags:
        - Weather Data
        - Delete
        - DeleteOne
        - Modify
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
        - $ref: '#/components/parameters/MeasurementDate'
      responses:
        '200':
          description: Successfully deleted weather data
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
    post:
      summary: Adds new weather data
      description: |
        Adds new weather data to the collection. If the operation was successful (status code `201`), the ID of the new weather data entry will be returned.
      operationId: postWeatherData
      tags:
        - Weather Data
        - Add
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
        - $ref: '#/components/parameters/MeasurementDate'
      requestBody:
        required: true
        description: Weather data to be added to the collection
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherData'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    format: int32
                    description: ID of the created weather data entry.
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '500':
          $ref: '#/components/responses/BackendError'
    patch:
      summary: Patches weather data for a specific station and date
      description: |
        Patches weather data for a specific weather station and date. The parameters `WeatherStationId` and `MeasurementDate` are required to replace the specific weather data with the new one. Also, the new data (`WeatherDataPatch`) is required. If the operation was successful (status code `200`), the new weather data will be returned.
      operationId: patchWeatherData
      tags:
        - Weather Data
        - Change
        - Modify
      parameters:
        - $ref: '#/components/parameters/WeatherStationId'
        - $ref: '#/components/parameters/MeasurementDate'
      requestBody:
        required: true
        description: The updated properties to patch
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/WeatherDataPatch'
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/WeatherData'
        '400':
          $ref: '#/components/responses/BadRequest'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '403':
          $ref: '#/components/responses/Forbidden'
        '404':
          description: The specified resource was not found
        '500':
          $ref: '#/components/responses/BackendError'
